<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Shubham Shinde</title>
<link>https://shindeshu.github.io/blog.html</link>
<atom:link href="https://shindeshu.github.io/blog.xml" rel="self" type="application/rss+xml"/>
<description>Blog for data science related topics</description>
<generator>quarto-1.1.251</generator>
<lastBuildDate>Sat, 21 Jan 2023 18:30:00 GMT</lastBuildDate>
<item>
  <title>Why Data Scientists Should Write Tests</title>
  <dc:creator>Shubham Shinde</dc:creator>
  <link>https://shindeshu.github.io/posts/datascience/whytests.html</link>
  <description><![CDATA[ 



<section id="the-jupyter-habitat" class="level2">
<h2 class="anchored" data-anchor-id="the-jupyter-habitat">The Jupyter Habitat</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/datascience/assets/habitat.JPG" class="img-fluid figure-img" style="width:60.0%"></p>
<p></p><figcaption class="figure-caption"><em>It is natural to use Jupyter</em></figcaption><p></p>
</figure>
</div>
<p>For a data scientist, jupyter notebooks are a natural habitat. They’re usually the first step in any project, and it’s the arena where thousands of lines of code are written, erased and forgotten forever in dumpgrounds. Data science is very exploratory in nature, because of which rapid iteration is necessary to build projects, which is exactly why notebooks are so popular. Constant experimentation and changes are a part of the job.</p>
<p>Yet as time passes and the project increases in scope, you find yourself moving away from a notebooks appraoch. There are many reasons why you’d switch to a traditional repo over a notebook.</p>
</section>
<section id="jupyter-no-longer" class="level2">
<h2 class="anchored" data-anchor-id="jupyter-no-longer">Jupyter No Longer</h2>
<section id="project-grows-in-scope." class="level3">
<h3 class="anchored" data-anchor-id="project-grows-in-scope.">Project Grows in Scope.</h3>
<p>There is simply more stuff to do, more knobs and more switches. At first, you think a utils.py file will take care of it all. But quickly the utils.py swells in size, resembling a Lovecraftian horror of a thousand functions each doing some distinct operation.</p>
<p>It is then you create modules for better delegating things and separation of operations. And the crisis is averted. For now.</p>
</section>
<section id="collaboration" class="level3">
<h3 class="anchored" data-anchor-id="collaboration">Collaboration</h3>
<p>Notebooks are great for one contributor to keep tinkering, but it is not the best approach when working with a team. Having a distributed system can be beneficial since people focus on their part of the repo. Another reason to move away from notebooks.</p>
</section>
<section id="deployment" class="level3">
<h3 class="anchored" data-anchor-id="deployment">Deployment</h3>
<p>While there have been newer tools to facilitate notebooks in production (<code>nbdev</code> etc), deployment to production generally needs you to have all of your code in <code>.py</code> files. This is another reason to move to modules.</p>
</section>
</section>
<section id="the-crisis-of-rapid-iteration" class="level2">
<h2 class="anchored" data-anchor-id="the-crisis-of-rapid-iteration">The Crisis of Rapid Iteration</h2>
<section id="slowing-down" class="level3">
<h3 class="anchored" data-anchor-id="slowing-down">Slowing Down</h3>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/datascience/assets/tuning.jpg" class="img-fluid figure-img" style="width:60.0%"></p>
<p></p><figcaption class="figure-caption"><em>Things become less fun</em></figcaption><p></p>
</figure>
</div>
<p>Except, now that the pivot is complete, you find yourself more frustrated than before. When writing a notebook, we usually ignore what are called “best practices” since they slow us down. We keep ignoring such practices even as the work grows in scope, and problems start rising.</p>
<p>Notebooks are a high velocity medium, which is their biggest strengths. You can quickly put together a bunch of code and get it running. You can quickly erase lines and add to make changes. It is a nimble, flexible craft.</p>
<p>When you are not working on a single notebook, and you have a forest of modules feeding into your cursor, the velocity often takes a hit. You find out that making a single change is a lot more expensive now than it was before. Many things end up breaking, when earlier making changes was easy. To add some functionality, you end up thinking about all the potential modules that could break.</p>
<p>This slows down the pace of development, and you end up captured in the web of your own local imports, scratching your heads through all the scripts present.</p>
</section>
<section id="its-a-mess" class="level3">
<h3 class="anchored" data-anchor-id="its-a-mess">It’s a Mess</h3>
<p>And there’s another important reason why the pace is down- because your code is too convoluted. The classes you defined have low cohesion, i.e.&nbsp;they do all sorts of different things. The modules you’ve defined are extremely dependent on each other, i.e.&nbsp;high coupling. So when you make changes in one module, because of high dependencies, some other module ends up breaking as well.</p>
<p>Managing the project architecture efficiently like this is an art that is learned through experience. If only there were simple disciplines, following which you could write better code. Turns out, writing tests can do that.</p>
</section>
</section>
<section id="what-are-tests" class="level2">
<h2 class="anchored" data-anchor-id="what-are-tests">What are Tests?</h2>
<p><img src="https://shindeshu.github.io/posts/datascience/assets/test.jpg" class="img-fluid" style="width:60.0%"></p>
<p>A few months ago, despite being 4 years into my professional journey, I had little idea about tests. It seemed like a software engineering concept that has no obvious application in a data science project. So if you’re like me, here’s a little primer about tests.</p>
<p>If, after making a change to the codebase, you run the entire workflow to make sure it worked (or broke), you are already testing. Except less efficiently. Running the entire workflow can be time-consuming, and you don’t want to run everything when you’ve made changes to only one section of the codebase. Plus, debugging can be tough. Tests are basically functions that you set up to check whether other modules are doing their job correctly.</p>
<p>Here’s an example of a function in the <code>transforms.py</code> file that does something.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">def</span> transform_data(df: pd.DataFrame) <span class="op" style="color: #5E5E5E;">-&gt;</span> pd.DataFrame:</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;"># run some transformation</span></span>
<span id="cb1-3">    <span class="cf" style="color: #003B4F;">return</span> df</span></code></pre></div>
</div>
<p>To create a test for this function (and others) create a file called <code>test_transforms.py</code>. Convention is to put all your tests inside a <code>tests/</code> folder at the top of the repo. Inside this file you can write</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;">from</span> src.transforms <span class="im" style="color: #00769E;">import</span> transform_data</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;">def</span> get_mock_data():</span>
<span id="cb2-4">    <span class="co" style="color: #5E5E5E;"># create mock data</span></span>
<span id="cb2-5">    df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({}) </span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;">def</span> test_transform_data():</span>
<span id="cb2-8">    <span class="co" style="color: #5E5E5E;"># the testing function should start with 'test_'</span></span>
<span id="cb2-9">    df <span class="op" style="color: #5E5E5E;">=</span> get_mock_data()</span>
<span id="cb2-10">    transformed_df <span class="op" style="color: #5E5E5E;">=</span> transform_data(df)</span>
<span id="cb2-11">    <span class="co" style="color: #5E5E5E;"># assert that the transform has correctly been completed</span></span>
<span id="cb2-12">    <span class="co" style="color: #5E5E5E;"># you can check any aspects that have been transformed</span></span>
<span id="cb2-13">    <span class="co" style="color: #5E5E5E;"># assume that the number of columns are doubled in transformation.</span></span>
<span id="cb2-14">    <span class="cf" style="color: #003B4F;">assert</span> <span class="bu" style="color: null;">len</span>(transformed_df.columns) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">*</span><span class="bu" style="color: null;">len</span>(df.columns)</span></code></pre></div>
</div>
<p>This test is completely isolated from the rest of the repo, so it’s failure has only one reason, the function itself.</p>
<p>Now you can run test this by three methods:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;">pytest</span> tests/</span></code></pre></div>
<p>Runs all the tests in the folder.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;">pytest</span> tests/test_transforms.py</span></code></pre></div>
<p>Runs only the tests on transforms</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;">pytest</span> tests.test_transforms.test_transform_data</span></code></pre></div>
<p>Runs only this particular function.</p>
</section>
<section id="why-are-tests" class="level2">
<h2 class="anchored" data-anchor-id="why-are-tests">Why Are Tests?</h2>
<section id="write-tests-to-improve-speed" class="level3">
<h3 class="anchored" data-anchor-id="write-tests-to-improve-speed">Write Tests to Improve Speed</h3>
<p>The single biggest reason why as data scientists need to write tests is that they are monumentally helpful in increasing the speed of experiments. Fast iteration is very important for a data scientist because we generally are constantly running experiments trying different ways to improve our models, trying a different architecture, tinkering with the pre-processing, etc.</p>
<p>When you write unit tests, making changes becomes easier because now you have an easy way of validating whether your changes are breaking the code or not. Moreover, because you are writing tests for each unit, you can identify exactly which part of the codebase is being affected by your change. Now that certain parts of the codebase are anchored in your mind as unbreakable, you are free of the anxiety to go tinker on other units.</p>
</section>
<section id="write-tests-for-better-code" class="level3">
<h3 class="anchored" data-anchor-id="write-tests-for-better-code">Write Tests for Better Code</h3>
<p>Second greatest reason is that writing tests help you write efficient code. Generally you shouldn’t write a function that does more than one thing. But while developing, in the flow you could write such cronenberg functions. When you write unit tests, you find that you need to write distinct tests for the same function, which is an indicator that it can be decomposed.</p>
<p>Similarly, writing tests help your code become orthogonal. You learn to write your code in such a manner that each unit is less dependent on other units. Which leads to modular, understandable code that is also very iteration-friendly.</p>
</section>
<section id="write-tests-for-collaboration" class="level3">
<h3 class="anchored" data-anchor-id="write-tests-for-collaboration">Write Tests for Collaboration</h3>
<p>Working in a team needs some vigilance. How to know if a change someone else made isn’t breaking down a routine specific to my task? Or vice versa? You simply write a test for your task, so your teammates can easily verify it themselves, reducing the feedback loop. Or you will waste time in to-and-fro clarifications.</p>
<p>If you hand over your repo to someone else, like a new team or the deployment team, the tests are helpful to them too for quick onboarding.</p>
</section>
<section id="write-tests-because-theyre-easy-and-cool" class="level3">
<h3 class="anchored" data-anchor-id="write-tests-because-theyre-easy-and-cool">Write Tests Because they’re Easy and Cool</h3>
<p>In python, it’s terribly easy to write tests thanks to the <code>pytest</code> library. Requires no syntax to learn, it’s as easy as writing a function. Writing tests is cool, that’s a fact. It also feels great when you run <code>pytest</code> on your code base and all of your cases pass in a flurry of green dots.</p>
<p>This, in a nutshell, why data scientists should not ignore the power of tests.</p>


</section>
</section>

 ]]></description>
  <category>data-science</category>
  <category>coding</category>
  <guid>https://shindeshu.github.io/posts/datascience/whytests.html</guid>
  <pubDate>Sat, 21 Jan 2023 18:30:00 GMT</pubDate>
  <media:content url="https://shindeshu.github.io/posts/datascience/assets/habitat.JPG" medium="image"/>
</item>
<item>
  <title>A Roadmap for Getting into Data Science</title>
  <dc:creator>Shubham Shinde</dc:creator>
  <link>https://shindeshu.github.io/posts/roadmap/start.html</link>
  <description><![CDATA[ 



<section id="everyone-wants-to-be-in" class="level2">
<h2 class="anchored" data-anchor-id="everyone-wants-to-be-in">Everyone Wants to Be In</h2>
<p>It’s no news nowadays that folks are flocking towards data science- there are quite many aspiring data scientists around who want to do AI things. I wrote this post as a starter for those beginner data scientists who want to break in. This post does not discuss whether you <em>should</em>, or about the quantum of opportunity in this space, that’s a different topic.</p>
<p>This post also does not give you a big list of links. We try to create a structure of our learning process, and in the end give a few resources.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/roadmap/assets/robot_learning.jpg" class="img-fluid figure-img" style="width:40.0%"></p>
<p></p><figcaption class="figure-caption"><em>Images generated using Stable Diffusion</em></figcaption><p></p>
</figure>
</div>
</section>
<section id="what-is-dsmlai" class="level2">
<h2 class="anchored" data-anchor-id="what-is-dsmlai">What is DS/ML/AI?</h2>
<p>Definitions are of no help here. There aren’t well-defined boundaries around these terms, no self-evident ground truths that distinguish ML from AI or DS.</p>
<p>Broadly, the field is about learning patterns from data to solve various business problems. Take for instance, price of a house. Traditionally, you could make up basic if-else rules that incorporate business logic to get a value for a house price. With data science you could utilize algorithms to learn these rules and predict these values given the attributes of a house. Similarly, you could</p>
<ul>
<li>Predict when a given machine part could fail</li>
<li>Flag a Credit Card Fraud</li>
<li>Assess Credit-Worthiness given financial attributes of an individual</li>
</ul>
<p>Ability to identify complex patterns in a data is useful in almost every domain that has any significant data, and underlying structure in it.</p>
<section id="some-real-use-cases-of-data-science" class="level3">
<h3 class="anchored" data-anchor-id="some-real-use-cases-of-data-science">Some Real Use Cases of Data Science</h3>
<ul>
<li><a href="https://www.analyticsvidhya.com/blog/2021/04/how-aviation-industry-uses-data-science/">Read how Aviation Industry Uses DS for Optimizing their Business Activities</a></li>
<li><a href="https://newsroom.prattwhitney.com/2016-02-16-Pratt-Whitney-Applies-Big-Data-to-Predict-Engine-Maintenance-Frequency-and-Planning">Read how Pratt and Whitney Uses DS for Predictive Maintenance of Engines</a></li>
</ul>
</section>
<section id="types-of-data---tabular-image-and-text" class="level3">
<h3 class="anchored" data-anchor-id="types-of-data---tabular-image-and-text">Types of Data - Tabular, Image and Text</h3>
<p>The examples cited above are of tabular data. As the name explains, it is data that’s stored in a tabular format. This is the most common data format, and easier to work on as well. But there’s also image data and text data, both are also increasingly forming the proportion of useful industrial models.</p>
<ul>
<li>On Pinterest, the images that get recommended to you are based on ML models.</li>
<li>Facebook, Twitter recommending feeds to you are recommended using ML models as well.</li>
<li>Face Recognition softwares are used worldwide.</li>
<li>Chatbots, Translation all use text-based ML models underneath them.</li>
</ul>
</section>
</section>
<section id="an-overview-of-requirements" class="level2">
<h2 class="anchored" data-anchor-id="an-overview-of-requirements">An Overview of Requirements</h2>
<p>What do you need to become a data scientist, and what do you do on a day-to-day basis on your job?</p>
<p>I’d divide this into four topics - Technical Skills, Theoretical Knowledge, Domain and Business Knowledge, and Project Management. For a beginner, we’d be only interested in the first two.</p>
<section id="technical-skills" class="level3">
<h3 class="anchored" data-anchor-id="technical-skills">Technical Skills</h3>
<p>These are divided into parts.</p>
<ul>
<li><strong>Software Engineering</strong>: You should know how to code.</li>
<li><strong>Tools Specific to Data Science</strong>: Know thy tools!</li>
</ul>
</section>
<section id="theoretical-knowledge" class="level3">
<h3 class="anchored" data-anchor-id="theoretical-knowledge">Theoretical Knowledge</h3>
<ul>
<li><strong>Theory of Data Science</strong>: Learn from the wisdom of ancients!</li>
<li><strong>Mathematics</strong>: Basics will do fine.</li>
</ul>
</section>
</section>
<section id="structure-your-machine-learning-journey" class="level2">
<h2 class="anchored" data-anchor-id="structure-your-machine-learning-journey">Structure Your Machine Learning Journey</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/roadmap/assets/structure.jpg" class="img-fluid figure-img" style="width:40.0%"></p>
<p></p><figcaption class="figure-caption">.</figcaption><p></p>
</figure>
</div>
<p>Here, we’ll expand on what are these skills, and how do you go about acquiring them, and in what order.</p>
<p><strong>Python</strong>: For a beginner, the first step should be to learn how to code. Python is the most used language in this space, and it is great language for a first-time coder to learn. In fact, the ease of coding is exactly the reason why python came to dominate the machine learning landscape. <a href="https://www.youtube.com/watch?v=rfscVS0vtbw&amp;t=5717s">This</a> is a good free resource to start learning.</p>
<p>Basics of the language are enough to get started- you don’t need to leetcode yourself. You do need to get a hang of jupyter notebooks, an IDE like VS-Code, and be able to install packages.</p>
<p><strong>Tabular vs Deep Learning</strong>: As a newcomer, you should aim to get proficient in tabular data before you move to tackling image or text datasets.</p>
<p><strong>Tools</strong>: Knowing pandas (library that handles tabular data) and matplotlib/seaborn (data visualization library) is another starting step. Knowing basic methods is enough at this stage.</p>
<p>Now that we have warmed up, we’ll step into the main process and discuss the sources to learn from.</p>
<section id="the-problem-of-plenty" class="level3">
<h3 class="anchored" data-anchor-id="the-problem-of-plenty">The Problem Of Plenty</h3>
<p>Where to learn from? There is just so much to choose, so many courses, books, websites, twitter influencers, linkedin influencers, an overflowing bookmarks folder, pdfs of unread papers. The progress is overwhelming too- What’s a standard practice a year ago may not be the same today.</p>
<p>This can be overwhelming for a veteran, let alone a beginner. Separating the noise from the signal can be daunting, as well as finding the best possible source to learn from.</p>
<p>Speaking from experience, what works best for me is learning on the job. Whatever projects I’ve worked on, that knowledge stays with me forever. Courses and Books are tougher to retain. So if you’re employed, give your best in your own project, it’s the best way to upskill.</p>
<p>However, if you’re not employed, or your job is narrow in its scope and you want to upskill, the problem persists. There should be a process to identify and follow the materials. (My personal recommendations are at the end of this post.)</p>
<p><strong>Courses</strong>: Instead of sampling and browsing dozens of courses, it is better to simply pick one and get started. The time you waste in finding the perfect course can be better utilized in completing an okay course. Most important thing is to get moving and not be stagnant.</p>
<p><strong>Books</strong>: There are some books that are structured as tutorials. Don’t delve deep into theory at this stage, if a book contains code snippets, is a latest copy, and is easy to read - that’s the one.</p>
<p><strong>Websites and Blogs</strong>: Keeping browsing medium, towardsdatascience, kdnuggets, etc. Keep it light.</p>
</section>
</section>
<section id="blind-men-and-the-elephant" class="level2">
<h2 class="anchored" data-anchor-id="blind-men-and-the-elephant">Blind Men and the Elephant</h2>
<p>Due to the problem of plenty, it is important to keep things simple. Don’t follow too many threads, pick a few sources and stick with it. Course- pick any one and complete it without distraction, but remember that this is not everything, and it has only shown you a part of the elephant. Much like the parable of the blind men and the elephant, where each of the men describe the elephant differently since they’re feeling a different part of the elephant.</p>
<p>Doing an online course could show you one part of this elephant- the theory behind the many algorithms like linear regression, random forest. There are many helpful books too that can do this. To cover other topics you’ll need other things.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/roadmap/assets/elephant.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Understanding the Elephant</figcaption><p></p>
</figure>
</div>
<section id="it-can-get-overwhelming" class="level3">
<h3 class="anchored" data-anchor-id="it-can-get-overwhelming">It Can Get Overwhelming</h3>
<p>I know that’s a lot of stuff, right? Data science can be overwhelming for a veteran, let alone one who’s just starting their journey. There is so much to learn, from the theory to the latest tools, the latest research, etc. Which is why it is important to remember that it is not necessary to learn <em>everything</em>.</p>
</section>
</section>
<section id="list-of-topics" class="level2">
<h2 class="anchored" data-anchor-id="list-of-topics">List of Topics</h2>
<p>This is a rough outline of how your learning journey could look like. Not exhaustive.</p>
<ul>
<li>Python, SQL (Basics)</li>
<li>Pandas and Matplotlib (Basics)
<ul>
<li>Reading and basic operations on dataframes</li>
<li>Basic plotting</li>
</ul></li>
<li>Data Science Theory
<ul>
<li>Supervised vs Unsupervised Learning</li>
<li>Different ways of representing data (encoding, binning)</li>
<li>supervised learning algorithms (linear regression, trees)</li>
<li>unsupervised learning algorithms (clustering, PCA)</li>
<li>model evaluation and metrics</li>
<li>overfitting, underfitting</li>
<li>ensembles, correlation, feature engineering, outliers, regularization</li>
</ul></li>
<li>Practice
<ul>
<li>use datasets to create models</li>
<li>data visualization and EDA</li>
</ul></li>
<li>Full-Fledged Projects</li>
</ul>
<p>This is a rough outline of the process. My recommended resource to start with is the book <strong>Introduction to Machine Learning using Python</strong> by Andreas Muller. It is a very easy-to-read book that contains code snippets and gradually introduces all topics. You can also complete the <strong>Kaggle Courses</strong> at <a href="https://www.kaggle.com/learn">here</a>, they’re quite friendly and brief tutorials, plus you can run them in your browser itself.</p>
<p>This outline doesn’t include deep learning (computer vision or natural language processing), or model deployment.</p>
</section>
<section id="a-practice-first-discipline" class="level2">
<h2 class="anchored" data-anchor-id="a-practice-first-discipline">A Practice-First Discipline</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/roadmap/assets/blacksmith.jpg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Learn by Doing! <em>Image by mastervector on freepik</em></figcaption><p></p>
</figure>
</div>
<p>The first two blocks are in place, the coding environment and the theory of data science. DS is a very practice-oriented discipline. Theoretical knowledge constitutes a small proportion of the data scientist mindspace. It is in the dirty trenches of the notebooks where the real are proven.</p>
<p>If your resume contains just a bunch of courses, it does not give an interviewer any idea of your prowess. But having a project, notebooks, repos is a sign that you have been there and done those things that matter the most. What things, you ask?</p>
<p>Reading data, understanding, cleaning, processing, preparing is the single most important aspect of data science that is often not given the necessary important even by those long in the game. These skills cannot be taught in any course or book, but be learned by doing.</p>
<p>Exploratory Data Analysis (EDA) is a term you’ll come across quite often, and it is an art more than a science, another skill that you’ll learn through practice. Understanding the contents of your data, asking it the right questions and making it answer, this is our bread and butter.</p>
<p>Then there are feature engineering, dealing with imbalanced data, model training, model evaluation, all skills which are practical in nature. Fortunately for us, there is a single place to learn all of the above- <strong>Kaggle</strong>.</p>
<p>Kaggle is a website where you can train machine learning models for free using many datasets available there. (It also hosts competitions, but at this point we are focussed on learning). Simply copy-and-editing someone else’s publicly available notebooks can be incredibly helpful to understand various work flows. Spend your time creating a chimaera of a dozen code blocks from dozen notebooks in a single task, and it will be exponentially helpful from a learning perspective.</p>
<section id="dont-heed-the-kaggle-haters" class="level3">
<h3 class="anchored" data-anchor-id="dont-heed-the-kaggle-haters">Don’t Heed the Kaggle Haters</h3>
<p>There has been criticism about Kaggle that it is not helpful for a data science job, since you always get a clean dataset in hand which is never the case in real life. While it is true that real life data is much messier than Kaggle, practicing in Kaggle has much more returns than handicap. You learn to max out your feature engineering skills, data visualization and EDA skills, and are also able to learn how to rapid iterations. Kaggle is helpful without a doubt.</p>
<p>You also get to learn about the latest techniques, libraries, models, you observe empirical evidence on what methods work and what don’t.</p>
</section>
</section>
<section id="projects" class="level2">
<h2 class="anchored" data-anchor-id="projects">Projects</h2>
<p>Once you are able to write a kaggle notebook from start to end, you have pretty much achieved the baseline of what you set out to do. So if you’re at this stage, you should sit back and congratulate yourself.</p>
<p>If you want to graduate to the next level, you should start doing full fledged projects that solve a meaningful problem. Here, you can use data that’s not from kaggle for a challenge.</p>
<p>This includes some advanced topics that can be skipped by a beginner, but if you are employed as a data scientist, these would be quite important.</p>
<p>How would this differ from a kaggle project</p>
<ul>
<li>work with .py files instead of a notebook</li>
<li>write comments, docstrings in order to be helpful to the reader</li>
<li>use sklearn pipelines in order to save the pre-processing steps, making it easier for inference.</li>
<li>write modular, readable code.</li>
<li>learn about code-writing guidelines. PEP8. Use black, isort, etc. tools.</li>
<li>write tests.</li>
</ul>
</section>
<section id="domain-knowledge" class="level2">
<h2 class="anchored" data-anchor-id="domain-knowledge">Domain Knowledge</h2>
<p>This section is not applicable for a complete beginner.</p>
<p>Nobody pays you to fit a model to a csv. The purpose of data scientists, at the end of the day, is to use their skills to add value to the business. This purpose, and that of understanding the data, formulating problems to solve, and evaluating solutions, all require you to have knowledge of the business systems that you work in. This includes industry knowledge, how processes flow inside your own firm, the meaning behind the data, and more. Acquiring this knowledge needs communication skills, and ability to ask the right questions.</p>
<p>Unlike specialists, data scientists also need to rotate over different businesses. If today you are building a recommender system for ecommerce, tomorrow you could be building a failure prediction model for aircraft engines. The variety of domains we operate in is vast, so the ability to quickly onboard is important too.</p>
</section>
<section id="deep-learning" class="level2">
<h2 class="anchored" data-anchor-id="deep-learning">Deep Learning</h2>
<p>Well, we only learned about tabular data! Where’s the cool stuff about neural networks, chat-GPT? This post was supposed to include deep learning topics as well, however the length has gotten too long hence they’ll be covered in a separate post.</p>
<p>However if you need a quick tutorial on them, you can follow <a href="https://www.kaggle.com/learn">the kaggle courses</a>.</p>
<p>Second place to grokk deep learning is reading and running public kernels on kaggle. Third place is the <a href="https://keras.io/examples/">official documentation</a> of libraries like keras.</p>
<p>Deep learning is a very empirical field where practice and theory go hand-in-hand. The traditional serial approach of reading up theory and then taking up examples will not work for deep learning, they have to go together. It is best if, as a beginner, you don’t go too deep into theoretical aspects of deep learning before getting hands-on experience with their applications.</p>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">Resources</h2>
<p>In order to avoid the problem of plenty, I will keep this list as short as possible.</p>
<ol type="1">
<li><p>Book - Introduction to Machine Learning by Andreas Muller. This covers theory and practice at the same time while being beginner friendly.</p></li>
<li><p>Course - Most courses like that of Andrew Ng are quite heavy on mathematics and the “backend” of ML algorithms. I personally think this is not a good place to start for a newcomer. However if you have a background in STEM, you might like this approach of thinking from first principles.</p></li>
<li><p>Kaggle Learn - Most people know kaggle for building models and competitions. But kaggle also has a courses section where there are easy-to-follow and brief tutorials on various topics like pandas, data visualization, etc. They are fantastic for a beginner.</p></li>
<li><p>Kaggle Notebooks - Spending time here will teach you about almost everything about model building.</p></li>
</ol>
<p>This is all for this beginner’s notebook. Good luck to your machine learning journey!</p>


</section>

 ]]></description>
  <category>getting-started</category>
  <category>data-science</category>
  <guid>https://shindeshu.github.io/posts/roadmap/start.html</guid>
  <pubDate>Sat, 14 Jan 2023 18:30:00 GMT</pubDate>
  <media:content url="https://shindeshu.github.io/posts/roadmap/assets/robot_learning.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A Friendly ☺️ Introduction to CNNs with Keras</title>
  <dc:creator>Shubham Shinde</dc:creator>
  <link>https://shindeshu.github.io/posts/tutorials/keras_cnns_intro.html</link>
  <description><![CDATA[ 



<section id="computer-vision" class="level2">
<h2 class="anchored" data-anchor-id="computer-vision">Computer Vision</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/tutorials/assets/computer_vision.jpg" class="img-fluid figure-img" style="width:50.0%"></p>
<p></p><figcaption class="figure-caption">Computer Vision</figcaption><p></p>
</figure>
</div>
<p>This was originally a <a href="https://www.kaggle.com/code/shindeshubham85/a-friendly-introduction-to-cnns-in-keras"><img src="https://shindeshu.github.io/posts/tutorials/assets/kaggle.png" class="img-fluid" style="width:10.0%"></a> notebook.</p>
<p>In a nutshell, CNNs are special deep learning architectures that have revolutionized the field of computer vision. Computer Vision is a field that is concerned about deriving information from images using computers. Some examples of computer vision include- Identifying whether a given image contains an item, like identifying a pedestrian in traffic, identifying cracks in an industrial machine, identifying if an X-Ray is abnormal. Self-Driving cars rely on computer vision algorithms, which are often CNNs. Filters on Instagram, face recognition systems, all use deep learning under the hood.</p>
<p>But some general types of computer vision problems are:</p>
<ul>
<li>Image Classification (Is this image of a cat?)</li>
<li>Object Detection (Is there a cat in this image, and WHERE exactly is it?)</li>
<li>Segmentation (give me the exact outline of the cat in this image, if it exists)</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/tutorials/assets/tasks.png" class="img-fluid figure-img" style="width:40.0%"></p>
<p></p><figcaption class="figure-caption">Computer Vision Tasks</figcaption><p></p>
</figure>
</div>
<section id="difference-from-traditional-modeling" class="level3">
<h3 class="anchored" data-anchor-id="difference-from-traditional-modeling">Difference from Traditional Modeling</h3>
<p>If you’re here, it probably means you’re familiar with basic machine learning concepts- like training data, predictions, feature engineering, etc. on tabular data. However image data is different from tabular data due to having a different structure, hence traditional algorithms like random forest cannot be used for classifying images.</p>
</section>
<section id="the-cnn-breakthrough" class="level3">
<h3 class="anchored" data-anchor-id="the-cnn-breakthrough">The CNN Breakthrough</h3>
<p>This is where CNNs made the breakthrough, and achieved tremendous results on image data. Before CNNs, image analytics required a lot of feature engineering and pre-processing (tons of hand-made filters). CNNs outperformed all the traditional methods without requiring such feature engineering. CNNs learnt the features and filters by itself. All you had to do was feed a lot of data to the model.</p>
</section>
</section>
<section id="deep-learning-and-neural-networks" class="level2">
<h2 class="anchored" data-anchor-id="deep-learning-and-neural-networks">Deep Learning and Neural Networks</h2>
<p>CNN, that is, Convolutional Neural Networks are a subfield of neural networks, a family of algorithms. A neural network is a collection of nodes or neurons, where each neuron has a weight*. These weights are learnt during the training process such that the model is able to predict the output when input is given. When a lot of such neurons are stacked together, we get a neural network. A neural network with a lot of layers would be called deep neural network, a phenomenon which has driven majority of the AI success in the last decade.</p>
<p>In CNNs, the neurons are arranged and stacked in a manner suitable for images.</p>
<section id="convolutional-neural-networks" class="level3">
<h3 class="anchored" data-anchor-id="convolutional-neural-networks">Convolutional Neural Networks</h3>
<p>In CNN, we have filters (which are tiny 3x3 matrices) which “convolve” an image to get a transformed matrix. We won’t worry about the theory and filters here. All you need to know, that filters transform the image to a new matrix. This matrix is made smaller by a method called Pooling. These two operations create one Convolution Layer, and several such Layers create a CNN. This order isn’t mandatory, as we’ll see later.</p>
<p>This is a <a href="https://www.youtube.com/watch?v=YRhxdVk_sIs">nice animation</a> that showcases the convolution operation.</p>
<div data-align="center">
<iframe align="middle" width="790" height="440" src="https://www.youtube.com/embed/YRhxdVk_sIs" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="">
</iframe>
</div>
</section>
<section id="transfer-learning" class="level3">
<h3 class="anchored" data-anchor-id="transfer-learning">Transfer Learning</h3>
<p>There’s a neat trick in deep learning called transfer learning- which is covered at the end of the notebook in case you make it.</p>
<p>That’s quite a lot of theory, on to the problem at hand.</p>
</section>
</section>
<section id="problem-at-hand" class="level2">
<h2 class="anchored" data-anchor-id="problem-at-hand">Problem At Hand</h2>
<p>The task at hand is an image classification task. You’re given a ton of images that are either a cat image or a dog image. Now, if you give a new image, you should be able to predict if it’s of a dog or a cat.</p>
<p>We are going to train a CNN to do this. Using the keras library.</p>
</section>
<section id="typical-workflow" class="level2">
<h2 class="anchored" data-anchor-id="typical-workflow">Typical Workflow</h2>
<p>Typically when you work on a CNN task, this is how your notebook flow will look like: Whatever time you spend with CNNs, it will be in one of these sections.</p>
<ol type="1">
<li><strong>Get the Images</strong></li>
</ol>
<p>(collecting images itself can be either a herculean task or sometimes ready-made data is available, time and effort varies with dataset)</p>
<p>Difficulty Level: Varies Time Needed: Varies</p>
<ol start="2" type="1">
<li><strong>Look at the Images and the Targets</strong></li>
</ol>
<p>(see how the images actually look like, what are the classes, how many of them.)</p>
<ol start="3" type="1">
<li><strong>Create a Data Loader</strong></li>
</ol>
<p>(in most libraries you need a guy that reads the images and feeds to the model, and does the intermediate work- batching, augmentation, split, multiprocessing, etc. configuring this step will be a good chunk of your time )</p>
<ol start="4" type="1">
<li><strong>Define Your Model</strong></li>
</ol>
<p>(how many CNN layers? How many filters, the optimizer, the loss function? this could be as easy as downloading/pasting an existing model in ten minutes, or the experiments could go on forever)</p>
<ol start="5" type="1">
<li><strong>Train the Model</strong></li>
</ol>
<p>(now throw the dataloader function on the model and let it train. sit back and sip coffee.)</p>
<ol start="6" type="1">
<li><strong>Get The Predictions</strong></li>
</ol>
<p>(here you actually use the model. for some task, or just to check if it’s doing good. evaluating whether the model is giving good predictions can also be challenging in some use cases.)</p>
<ol start="7" type="1">
<li><strong>Debugging</strong></li>
</ol>
<p>If you keep it simple, load pre-built modules, the model will work. But there could be many possible problems that might arise in the task. These will be covered at the end.</p>
<p>::: {.cell _cell_guid=‘b1076dfc-b9ad-4769-8c92-a6c4dae69d19’ _uuid=‘8f2839f25d086af736a60e9eeb907d3b93b6e0e5’ execution=‘{“iopub.execute_input”:“2023-01-07T11:37:46.774008Z”,“iopub.status.busy”:“2023-01-07T11:37:46.773068Z”,“iopub.status.idle”:“2023-01-07T11:37:52.956681Z”,“shell.execute_reply”:“2023-01-07T11:37:52.955647Z”}’ papermill=‘{“duration”:6.19509,“end_time”:“2023-01-07T11:37:52.959543”,“exception”:false,“start_time”:“2023-01-07T11:37:46.764453”,“status”:“completed”}’ tags=‘[]’ execution_count=1}</p>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> pandas <span class="im" style="color: #00769E;">as</span> pd </span>
<span id="cb1-3"><span class="im" style="color: #00769E;">from</span> tensorflow.keras.preprocessing.image <span class="im" style="color: #00769E;">import</span> ImageDataGenerator, load_img</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">from</span> tensorflow.keras.utils <span class="im" style="color: #00769E;">import</span> plot_model</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">from</span> tensorflow.keras.utils <span class="im" style="color: #00769E;">import</span> to_categorical</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;">import</span> train_test_split</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">import</span> random</span>
<span id="cb1-9"><span class="im" style="color: #00769E;">import</span> os</span>
<span id="cb1-10"><span class="im" style="color: #00769E;">from</span> PIL <span class="im" style="color: #00769E;">import</span> Image</span>
<span id="cb1-11"><span class="im" style="color: #00769E;">import</span> glob</span></code></pre></div>
<p>:::</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T11:37:52.977159Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T11:37:52.975428Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T11:37:53.924902Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T11:37:53.923709Z&quot;}" data-papermill="{&quot;duration&quot;:0.960419,&quot;end_time&quot;:&quot;2023-01-07T11:37:53.927312&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T11:37:52.966893&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;">!</span>ls ..<span class="op" style="color: #5E5E5E;">/</span><span class="bu" style="color: null;">input</span><span class="op" style="color: #5E5E5E;">/</span>dogs<span class="op" style="color: #5E5E5E;">-</span>vs<span class="op" style="color: #5E5E5E;">-</span>cats<span class="op" style="color: #5E5E5E;">/</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;"># the images are in a zip file in this folder</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>sampleSubmission.csv  test1.zip  train.zip</code></pre>
</div>
</div>
</section>
<section id="get-the-images" class="level2">
<h2 class="anchored" data-anchor-id="get-the-images">1. Get the Images</h2>
<p>Extract the images from the zip file. Now there are two folders: train/ and test1/</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T11:37:53.959044Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T11:37:53.958255Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T11:38:10.454469Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T11:38:10.453237Z&quot;}" data-papermill="{&quot;duration&quot;:16.507658,&quot;end_time&quot;:&quot;2023-01-07T11:38:10.457557&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T11:37:53.949899&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;">import</span> zipfile</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="cf" style="color: #003B4F;">with</span> zipfile.ZipFile(<span class="st" style="color: #20794D;">"../input/dogs-vs-cats/train.zip"</span>,<span class="st" style="color: #20794D;">"r"</span>) <span class="im" style="color: #00769E;">as</span> z:</span>
<span id="cb4-4">    z.extractall(<span class="st" style="color: #20794D;">"."</span>)</span>
<span id="cb4-5">    </span>
<span id="cb4-6"><span class="cf" style="color: #003B4F;">with</span> zipfile.ZipFile(<span class="st" style="color: #20794D;">"../input/dogs-vs-cats/test1.zip"</span>,<span class="st" style="color: #20794D;">"r"</span>) <span class="im" style="color: #00769E;">as</span> z:</span>
<span id="cb4-7">    z.extractall(<span class="st" style="color: #20794D;">"."</span>)</span>
<span id="cb4-8"><span class="op" style="color: #5E5E5E;">!</span>ls <span class="op" style="color: #5E5E5E;">/</span>kaggle<span class="op" style="color: #5E5E5E;">/</span>working<span class="op" style="color: #5E5E5E;">/</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>__notebook__.ipynb  test1  train</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T11:38:10.480187Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T11:38:10.479766Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T11:38:10.598919Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T11:38:10.597850Z&quot;}" data-papermill="{&quot;duration&quot;:0.133456,&quot;end_time&quot;:&quot;2023-01-07T11:38:10.601783&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T11:38:10.468327&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># let's look at any five files in the train folder</span></span>
<span id="cb6-2">glob.glob(<span class="st" style="color: #20794D;">"/kaggle/working/train/*.jpg"</span>)[:<span class="dv" style="color: #AD0000;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>['/kaggle/working/train/dog.8701.jpg',
 '/kaggle/working/train/dog.9481.jpg',
 '/kaggle/working/train/cat.104.jpg',
 '/kaggle/working/train/cat.8800.jpg',
 '/kaggle/working/train/dog.6199.jpg']</code></pre>
</div>
</div>
<p>You now notice that the label is encoded in the filename itself- cat or dog! We need to extract that to be able to train the model.</p>
<p>We are collecting each filename, and the corresponding label in a pandas dataframe (needed later)</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T11:38:10.645446Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T11:38:10.645005Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T11:38:10.800698Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T11:38:10.799509Z&quot;}" data-papermill="{&quot;duration&quot;:0.169767,&quot;end_time&quot;:&quot;2023-01-07T11:38:10.803124&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T11:38:10.633357&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">train_files <span class="op" style="color: #5E5E5E;">=</span> glob.glob(<span class="st" style="color: #20794D;">"/kaggle/working/train/*.jpg"</span>)</span>
<span id="cb8-2">train_labels <span class="op" style="color: #5E5E5E;">=</span> [i.strip(<span class="st" style="color: #20794D;">'/kaggle/working/train/'</span>)[:<span class="dv" style="color: #AD0000;">3</span>] <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> train_files]</span>
<span id="cb8-3">train_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">'filename'</span>: train_files, <span class="st" style="color: #20794D;">'class'</span>: train_labels})</span>
<span id="cb8-4">train_df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">

<div>

<table class="dataframe table table-sm table-striped">
  <thead>
    <tr>
      <th></th>
      <th>filename</th>
      <th>class</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>/kaggle/working/train/dog.8701.jpg</td>
      <td>dog</td>
    </tr>
    <tr>
      <th>1</th>
      <td>/kaggle/working/train/dog.9481.jpg</td>
      <td>dog</td>
    </tr>
    <tr>
      <th>2</th>
      <td>/kaggle/working/train/cat.104.jpg</td>
      <td>cat</td>
    </tr>
    <tr>
      <th>3</th>
      <td>/kaggle/working/train/cat.8800.jpg</td>
      <td>cat</td>
    </tr>
    <tr>
      <th>4</th>
      <td>/kaggle/working/train/dog.6199.jpg</td>
      <td>dog</td>
    </tr>
  </tbody>
</table>
</div>
</div>
</div>
<p>First step is done- we have the images, and we have the labels. Let’s move to the second step.</p>
</section>
<section id="look-at-them" class="level2">
<h2 class="anchored" data-anchor-id="look-at-them">2. Look at Them!</h2>
<p>We now observe what the images look like. We’ll look at four random images from the data.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T11:38:10.848325Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T11:38:10.848020Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T11:38:11.537208Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T11:38:11.536377Z&quot;}" data-papermill="{&quot;duration&quot;:0.704933,&quot;end_time&quot;:&quot;2023-01-07T11:38:11.544590&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T11:38:10.839657&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">fig, axs <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>))</span>
<span id="cb9-2">axs <span class="op" style="color: #5E5E5E;">=</span> axs.ravel()</span>
<span id="cb9-3"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">4</span>):</span>
<span id="cb9-4">    idx <span class="op" style="color: #5E5E5E;">=</span> random.choice(train_df.index)</span>
<span id="cb9-5">    axs[i].imshow(Image.<span class="bu" style="color: null;">open</span>(train_df[<span class="st" style="color: #20794D;">'filename'</span>][idx]))</span>
<span id="cb9-6">    axs[i].set_title(train_df[<span class="st" style="color: #20794D;">'class'</span>][idx])</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://shindeshu.github.io/posts/tutorials/keras_cnns_intro_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<p>This is a pretty clean dataset- that’s good. The subjects of the image are in center, occupy a majority of the image, no blurriness or anything. (Ideally you’d look at more images than a dozen tho,:) )</p>
<p>You might’ve noticed that the dimensions of the images are not constant, they vary a lot. This will be a problem for the CNN- it expects images of a fixed size! How do we take care of it? We don’t, our data loader guy will do it for us.</p>
<p>(Well, sometimes we might want to do it ourselves, if we think the resizing needs extra attention- but in this case, we’ll let it be automated.)</p>
</section>
<section id="release-the-loader" class="level2">
<h2 class="anchored" data-anchor-id="release-the-loader">3. Release the Loader!</h2>
<p>Dataloaders are the unsung heroes of the CNN world- they take care of a lot of nasty work that would be a nightmare if we had to do it by hand. What they essentially do is simple- read the data from the disk, and feed to the model. But under the hood they take care of many things, like…</p>
<ol type="1">
<li>Resizing, as we discussed. Ensuring that each image is of a fixed size.</li>
<li>Batching. Feeding images one-by-one to the model is tedious, would take a lot of time. It’s better to feed a large number of them at once (as much your computer will allow)</li>
<li>Label Encoding. Computers don’t understand string like ‘cat’ or ‘dog’, you have to convert them to numbers like 0 or 1.</li>
<li>Data Augmentation. Create more images by slightly modifying an image (flipping it, rotating it teeny bit, adding some spots, etc.)</li>
<li>Validation Split. Keras now has support for validation splitting.</li>
<li>Sometimes the data is too large to fit into memory (10+ GB, say), then loaders can iterate through the dataset on disk chunk-by-chunk instead of loading everything at once.</li>
</ol>
<p>We are using keras’s <code>ImageDataGenerator</code> to create our training data loader.</p>
<p>Two steps:</p>
<ol type="1">
<li>Define a <code>ImageDataGenerator</code> instance, and specify the augmentation strategies.</li>
<li>Create a generator from this instance by specifying the image file paths and labels. Pass this generator to the model for training.</li>
</ol>
<p>In pytorch there’s <code>torch.utils.data.Dataset</code> and<code>torch.utils.data.DataLoader</code>. Sometimes you may need to define a custom dataloader, but the default is good enough for most use cases.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T11:38:11.626785Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T11:38:11.626434Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T11:38:11.632274Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T11:38:11.631254Z&quot;}" data-papermill="{&quot;duration&quot;:0.022781,&quot;end_time&quot;:&quot;2023-01-07T11:38:11.634597&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T11:38:11.611816&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">train_datagen <span class="op" style="color: #5E5E5E;">=</span> ImageDataGenerator(</span>
<span id="cb10-2">    rotation_range<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>,</span>
<span id="cb10-3">    rescale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.</span><span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span>,</span>
<span id="cb10-4">    horizontal_flip<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>,</span>
<span id="cb10-5">    shear_range<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>,</span>
<span id="cb10-6">    zoom_range<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>,</span>
<span id="cb10-7">    validation_split<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.2</span>)</span>
<span id="cb10-8"></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;"># create a image data generator object. </span></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;"># all these are data augmentation parameters.</span></span>
<span id="cb10-11"></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;"># now let's specify the image size to which each image will be resized to</span></span>
<span id="cb10-13">img_height, img_width <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">224</span>, <span class="dv" style="color: #AD0000;">224</span></span>
<span id="cb10-14">batch_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">64</span></span></code></pre></div>
</div>
<p>There are two ways to create data generators/loaders from above instance. I recommend going through the <a href="https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image/ImageDataGenerator">ImageDataGenerator API page</a>, but the two methods are:</p>
<ol type="1">
<li>Flow from Dataframe (here, you can contain the filenames and labels in a pandas dataframe, and pass the dataframe), we are using this, remember the dataframe we created earlier?</li>
<li>Flow from Directory (here, you can pass the path of a directory. This directory should contain subfolders corresponding to each class. You will have to rearrange your directory so that it looks like this.</li>
</ol>
<pre><code>Train/
---| Dog/
   ---| Dog1.jpg
   ---| Dog1.jpg
---| Cat/
   ---| Cat1.jpg
   ---| Cat2.jpg
Val/
---| Dog/
   ---| Dog5.jpg
   ---| Dog6.jpg
---| Cat/
   ---| Cat7.jpg
   ---| Cat8.jpg</code></pre>
<p>Since we are using method1, we will not be rearranging the folders.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T11:38:11.689506Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T11:38:11.689194Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T11:38:12.066046Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T11:38:12.064842Z&quot;}" data-papermill="{&quot;duration&quot;:0.393957,&quot;end_time&quot;:&quot;2023-01-07T11:38:12.068358&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T11:38:11.674401&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">train_generator <span class="op" style="color: #5E5E5E;">=</span> train_datagen.flow_from_dataframe(</span>
<span id="cb12-2">    train_df,</span>
<span id="cb12-3">    target_size<span class="op" style="color: #5E5E5E;">=</span>(img_height, img_width),</span>
<span id="cb12-4">    batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size,</span>
<span id="cb12-5">    class_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'categorical'</span>,</span>
<span id="cb12-6">    subset<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'training'</span>) <span class="co" style="color: #5E5E5E;"># set as training data</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="co" style="color: #5E5E5E;"># remember we put 0.2 validation split while defining ImageDataGenerator?</span></span>
<span id="cb12-9">validation_generator <span class="op" style="color: #5E5E5E;">=</span> train_datagen.flow_from_dataframe(</span>
<span id="cb12-10">    train_df, <span class="co" style="color: #5E5E5E;"># same directory as training data</span></span>
<span id="cb12-11">    target_size<span class="op" style="color: #5E5E5E;">=</span>(img_height, img_width),</span>
<span id="cb12-12">    batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size,</span>
<span id="cb12-13">    class_mode<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'categorical'</span>,</span>
<span id="cb12-14">    subset<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'validation'</span>) <span class="co" style="color: #5E5E5E;"># set as validation data</span></span>
<span id="cb12-15"></span>
<span id="cb12-16"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Class Indices:"</span>, train_generator.class_indices)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Found 20000 validated image filenames belonging to 2 classes.
Found 5000 validated image filenames belonging to 2 classes.
Class Indices: {'cat': 0, 'dog': 1}</code></pre>
</div>
</div>
</section>
<section id="define-a-model" class="level2">
<h2 class="anchored" data-anchor-id="define-a-model">4. Define A Model</h2>
<p>Now we come to the meaty part- defining the CNN network, the engine of our application. As we discussed earlier, we are going to define a series of Convolution Layers, and each convolution layer consists of a convolution operation followed by a max pool layer.</p>
<p>This order is not mandatory- you can have two Convolution operations followed by one max pool, or three, or an average pool- that’s the neat part of neural networks, they’re so adaptable and malleable, and the best configurations are often found out by trial and error. In this case, we are going with the wisdom of our elders, and go by this order.</p>
<section id="head-of-a-cnn" class="level3">
<h3 class="anchored" data-anchor-id="head-of-a-cnn">Head of A CNN</h3>
<p>As we apply more Conv Layers, you will get a transformed matrix of somesize x somesize. But what good is a matrix to us? We need a simple answer- 0 or 1! In order to get this answer, we “flatten” the final matrix to a single vector of size somesize-times-2 x 1. Then we pass it through more neural network neurons to get a single neuron at the end. This neuron’s output is constrained between 0 and 1. This is our final probability! If it’s greater than 0.5, the prediction is 1, if not, it’s 0.</p>
<p>If you have more than 2 classes, like predicting a digit. In this case, there would be ten neurons at the end. Each of their output would be the probability of that class.</p>
</section>
<section id="model-hyperparameters" class="level3">
<h3 class="anchored" data-anchor-id="model-hyperparameters">Model Hyperparameters</h3>
<p>Apart from number of Conv layers, there are other design choices while designing a CNN- they include selecting the optimizer, the learning rate, the loss function, the number of filters. For an introductory notebook, discussion on those is not necessary.</p>
<p>What’s important to note: passing the input shape to the first layer. Ensuring that the last layer corresponds to the number of classes.</p>
<p>Try tinkering with this configuration to see how the results change. Try using only one Conv Layer, reducing number of filters, increasing number of filters, etc.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T11:38:12.123985Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T11:38:12.123655Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T11:38:15.006157Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T11:38:15.004003Z&quot;}" data-papermill="{&quot;duration&quot;:2.899066,&quot;end_time&quot;:&quot;2023-01-07T11:38:15.008260&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T11:38:12.109194&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;">from</span> keras.models <span class="im" style="color: #00769E;">import</span> Sequential</span>
<span id="cb14-2"><span class="im" style="color: #00769E;">from</span> keras.layers <span class="im" style="color: #00769E;">import</span> Conv2D, MaxPooling2D, Dropout, Flatten, Dense, Activation, BatchNormalization</span>
<span id="cb14-3"></span>
<span id="cb14-4">model <span class="op" style="color: #5E5E5E;">=</span> Sequential()</span>
<span id="cb14-5"></span>
<span id="cb14-6">model.add(Conv2D(<span class="dv" style="color: #AD0000;">32</span>, (<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>), activation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'relu'</span>, </span>
<span id="cb14-7">                 input_shape<span class="op" style="color: #5E5E5E;">=</span>(img_width, img_height, <span class="dv" style="color: #AD0000;">3</span>)))</span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;"># 32 here means this layer will contain 32 filters of size 3x3 being learnt</span></span>
<span id="cb14-9">model.add(BatchNormalization())</span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;"># batchnorm is a useful layer that helps in convergence</span></span>
<span id="cb14-11">model.add(MaxPooling2D(pool_size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>)))</span>
<span id="cb14-12"><span class="co" style="color: #5E5E5E;"># maxpooling will reduce the size of the image</span></span>
<span id="cb14-13">model.add(Dropout(<span class="fl" style="color: #AD0000;">0.25</span>))</span>
<span id="cb14-14"><span class="co" style="color: #5E5E5E;"># dropout is used for regularization, ensuring that model doesn't overfit</span></span>
<span id="cb14-15"></span>
<span id="cb14-16">model.add(Conv2D(<span class="dv" style="color: #AD0000;">64</span>, (<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>), activation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'relu'</span>))</span>
<span id="cb14-17">model.add(BatchNormalization())</span>
<span id="cb14-18">model.add(MaxPooling2D(pool_size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>)))</span>
<span id="cb14-19">model.add(Dropout(<span class="fl" style="color: #AD0000;">0.25</span>))</span>
<span id="cb14-20"></span>
<span id="cb14-21">model.add(Conv2D(<span class="dv" style="color: #AD0000;">128</span>, (<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">3</span>), activation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'relu'</span>))</span>
<span id="cb14-22">model.add(BatchNormalization())</span>
<span id="cb14-23">model.add(MaxPooling2D(pool_size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>)))</span>
<span id="cb14-24">model.add(Dropout(<span class="fl" style="color: #AD0000;">0.25</span>))</span>
<span id="cb14-25"></span>
<span id="cb14-26"><span class="co" style="color: #5E5E5E;"># convolutional block is complete. now on to defining the "head"</span></span>
<span id="cb14-27"></span>
<span id="cb14-28"><span class="co" style="color: #5E5E5E;"># first flatten the matrix to get a single array</span></span>
<span id="cb14-29">model.add(Flatten())</span>
<span id="cb14-30"><span class="co" style="color: #5E5E5E;"># adding a dense hidden layer of neurons</span></span>
<span id="cb14-31">model.add(Dense(<span class="dv" style="color: #AD0000;">512</span>, activation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'relu'</span>))</span>
<span id="cb14-32">model.add(BatchNormalization())</span>
<span id="cb14-33">model.add(Dropout(<span class="fl" style="color: #AD0000;">0.5</span>))</span>
<span id="cb14-34"><span class="co" style="color: #5E5E5E;"># finally the output layer with neurons=number of classes and softmax activation</span></span>
<span id="cb14-35">model.add(Dense(<span class="dv" style="color: #AD0000;">2</span>, activation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'softmax'</span>)) <span class="co" style="color: #5E5E5E;"># 2 because we have cat and dog classes</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2023-01-07 11:38:12.212718: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-01-07 11:38:12.342711: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-01-07 11:38:12.343593: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-01-07 11:38:12.345511: I tensorflow/core/platform/cpu_feature_guard.cc:142] This TensorFlow binary is optimized with oneAPI Deep Neural Network Library (oneDNN) to use the following CPU instructions in performance-critical operations:  AVX2 AVX512F FMA
To enable them in other operations, rebuild TensorFlow with the appropriate compiler flags.
2023-01-07 11:38:12.345912: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-01-07 11:38:12.346654: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-01-07 11:38:12.347302: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-01-07 11:38:14.495879: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-01-07 11:38:14.496731: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-01-07 11:38:14.497497: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-01-07 11:38:14.498130: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15401 MB memory:  -&gt; device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0</code></pre>
</div>
</div>
<p>Let’s visualize how our network looks like, and what the shapes of input and output at each layer.</p>
<p>The shapes of input and output can be useful for debugging. If there’s a mismatch between output of one layer and input of next, model will throw up error.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T11:38:15.065000Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T11:38:15.064096Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T11:38:15.999864Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T11:38:15.998734Z&quot;}" data-papermill="{&quot;duration&quot;:0.952978,&quot;end_time&quot;:&quot;2023-01-07T11:38:16.002149&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T11:38:15.049171&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="10">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">plot_model(model, show_shapes<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, show_layer_names<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">60</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<p><img src="https://shindeshu.github.io/posts/tutorials/keras_cnns_intro_files/figure-html/cell-11-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T11:38:16.036028Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T11:38:16.034444Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T11:38:16.050816Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T11:38:16.049980Z&quot;}" data-papermill="{&quot;duration&quot;:0.034609,&quot;end_time&quot;:&quot;2023-01-07T11:38:16.052796&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T11:38:16.018187&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;"># compile the model while defining a loss, optimizer, and metrics to track, </span></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;"># and add callbacks if necessary</span></span>
<span id="cb17-3">model.<span class="bu" style="color: null;">compile</span>(loss<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'categorical_crossentropy'</span>, </span>
<span id="cb17-4">              optimizer<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'adam'</span>, </span>
<span id="cb17-5">              metrics<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'accuracy'</span>])</span></code></pre></div>
</div>
</section>
</section>
<section id="train-the-model" class="level2">
<h2 class="anchored" data-anchor-id="train-the-model">5. Train the Model</h2>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T11:38:16.085075Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T11:38:16.083469Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T12:36:10.273935Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T12:36:10.272894Z&quot;}" data-papermill="{&quot;duration&quot;:3474.20881,&quot;end_time&quot;:&quot;2023-01-07T12:36:10.276450&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T11:38:16.067640&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb18-2">history <span class="op" style="color: #5E5E5E;">=</span> model.fit(</span>
<span id="cb18-3">    train_generator, </span>
<span id="cb18-4">    epochs<span class="op" style="color: #5E5E5E;">=</span>epochs,</span>
<span id="cb18-5">    validation_data<span class="op" style="color: #5E5E5E;">=</span>validation_generator,</span>
<span id="cb18-6">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>2023-01-07 11:38:16.953970: I tensorflow/compiler/mlir/mlir_graph_optimization_pass.cc:185] None of the MLIR Optimization Passes are enabled (registered 2)</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1/10</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>2023-01-07 11:38:20.190526: I tensorflow/stream_executor/cuda/cuda_dnn.cc:369] Loaded cuDNN version 8005</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>313/313 [==============================] - 334s 1s/step - loss: 0.7747 - accuracy: 0.6353 - val_loss: 1.8673 - val_accuracy: 0.4876
Epoch 2/10
313/313 [==============================] - 324s 1s/step - loss: 0.5450 - accuracy: 0.7254 - val_loss: 0.5757 - val_accuracy: 0.7110
Epoch 3/10
313/313 [==============================] - 325s 1s/step - loss: 0.4821 - accuracy: 0.7671 - val_loss: 0.4726 - val_accuracy: 0.7732
Epoch 4/10
313/313 [==============================] - 326s 1s/step - loss: 0.4332 - accuracy: 0.7987 - val_loss: 0.4627 - val_accuracy: 0.7800
Epoch 5/10
313/313 [==============================] - 323s 1s/step - loss: 0.3989 - accuracy: 0.8184 - val_loss: 0.4141 - val_accuracy: 0.8128
Epoch 6/10
313/313 [==============================] - 322s 1s/step - loss: 0.3702 - accuracy: 0.8349 - val_loss: 0.4598 - val_accuracy: 0.7822
Epoch 7/10
313/313 [==============================] - 323s 1s/step - loss: 0.3409 - accuracy: 0.8484 - val_loss: 0.3489 - val_accuracy: 0.8442
Epoch 8/10
313/313 [==============================] - 324s 1s/step - loss: 0.3169 - accuracy: 0.8641 - val_loss: 0.3765 - val_accuracy: 0.8478
Epoch 9/10
313/313 [==============================] - 323s 1s/step - loss: 0.3124 - accuracy: 0.8629 - val_loss: 0.4741 - val_accuracy: 0.7906
Epoch 10/10
313/313 [==============================] - 324s 1s/step - loss: 0.2925 - accuracy: 0.8721 - val_loss: 0.6446 - val_accuracy: 0.7484</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T12:36:10.625999Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T12:36:10.625243Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T12:36:11.152627Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T12:36:11.151742Z&quot;}" data-papermill="{&quot;duration&quot;:0.703214,&quot;end_time&quot;:&quot;2023-01-07T12:36:11.154843&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T12:36:10.451629&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="13">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;">def</span> plot_loss(history):</span>
<span id="cb23-2">    fig, (ax1, ax2) <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">6</span>))</span>
<span id="cb23-3">    ax1.plot(history.history[<span class="st" style="color: #20794D;">'loss'</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'b'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Training loss"</span>)</span>
<span id="cb23-4">    ax1.plot(history.history[<span class="st" style="color: #20794D;">'val_loss'</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"validation loss"</span>)</span>
<span id="cb23-5">    ax1.set_xticks(np.arange(<span class="dv" style="color: #AD0000;">1</span>, epochs, <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb23-6"></span>
<span id="cb23-7">    ax2.plot(history.history[<span class="st" style="color: #20794D;">'accuracy'</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'b'</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Training accuracy"</span>)</span>
<span id="cb23-8">    ax2.plot(history.history[<span class="st" style="color: #20794D;">'val_accuracy'</span>], color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'r'</span>,label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"Validation accuracy"</span>)</span>
<span id="cb23-9">    ax2.set_xticks(np.arange(<span class="dv" style="color: #AD0000;">1</span>, epochs, <span class="dv" style="color: #AD0000;">1</span>))</span>
<span id="cb23-10"></span>
<span id="cb23-11">    legend <span class="op" style="color: #5E5E5E;">=</span> plt.legend(loc<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'best'</span>, shadow<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb23-12">    plt.tight_layout()</span>
<span id="cb23-13">    plt.show()</span>
<span id="cb23-14">plot_loss(history)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://shindeshu.github.io/posts/tutorials/keras_cnns_intro_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="get-the-predictions" class="level2">
<h2 class="anchored" data-anchor-id="get-the-predictions">6. Get the Predictions</h2>
<p>Now that the model is trained, let’s check if the model is giving us good predictions, by trying it out on the test data.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T12:36:11.897834Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T12:36:11.897458Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T12:36:12.023708Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T12:36:12.022626Z&quot;}" data-papermill="{&quot;duration&quot;:0.353908,&quot;end_time&quot;:&quot;2023-01-07T12:36:12.026546&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T12:36:11.672638&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="14">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">test_files <span class="op" style="color: #5E5E5E;">=</span> glob.glob(<span class="st" style="color: #20794D;">'/kaggle/working/test1/*.jpg'</span>)</span>
<span id="cb24-2">test_df <span class="op" style="color: #5E5E5E;">=</span> pd.DataFrame({<span class="st" style="color: #20794D;">'filename'</span>: test_files})</span>
<span id="cb24-3">test_gen <span class="op" style="color: #5E5E5E;">=</span> ImageDataGenerator(rescale<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.</span><span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">255</span>)</span>
<span id="cb24-4">test_generator <span class="op" style="color: #5E5E5E;">=</span> test_gen.flow_from_dataframe(</span>
<span id="cb24-5">    test_df, </span>
<span id="cb24-6">    x_col<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'filename'</span>,</span>
<span id="cb24-7">    y_col<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>,</span>
<span id="cb24-8">    class_mode<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>,</span>
<span id="cb24-9">    target_size<span class="op" style="color: #5E5E5E;">=</span>(img_height, img_width),</span>
<span id="cb24-10">    batch_size<span class="op" style="color: #5E5E5E;">=</span>batch_size,</span>
<span id="cb24-11">    shuffle<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Found 12500 validated image filenames.</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T12:36:12.374320Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T12:36:12.373921Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T12:36:19.003695Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T12:36:19.002898Z&quot;}" data-papermill="{&quot;duration&quot;:6.812598,&quot;end_time&quot;:&quot;2023-01-07T12:36:19.011415&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T12:36:12.198817&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="15">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="kw" style="color: #003B4F;">def</span> visualize_predictions(test_generator, model):</span>
<span id="cb26-2">    plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">12</span>))</span>
<span id="cb26-3">    <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">15</span>):</span>
<span id="cb26-4">        plt.subplot(<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">3</span>, i<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb26-5">        <span class="cf" style="color: #003B4F;">for</span> X_batch <span class="kw" style="color: #003B4F;">in</span> test_generator:</span>
<span id="cb26-6">            prediction <span class="op" style="color: #5E5E5E;">=</span> model.predict(X_batch)[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb26-7">            image <span class="op" style="color: #5E5E5E;">=</span> X_batch[<span class="dv" style="color: #AD0000;">0</span>]</span>
<span id="cb26-8">            plt.imshow(image)</span>
<span id="cb26-9">            plt.title(<span class="st" style="color: #20794D;">'cat'</span> <span class="cf" style="color: #003B4F;">if</span> np.argmax(prediction)<span class="op" style="color: #5E5E5E;">==</span><span class="dv" style="color: #AD0000;">0</span> <span class="cf" style="color: #003B4F;">else</span> <span class="st" style="color: #20794D;">"dog"</span>)</span>
<span id="cb26-10">            <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb26-11">    plt.tight_layout()</span>
<span id="cb26-12">    plt.show()</span>
<span id="cb26-13">visualize_predictions(test_generator, model)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://shindeshu.github.io/posts/tutorials/keras_cnns_intro_files/figure-html/cell-16-output-1.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="transfer-learning-1" class="level2">
<h2 class="anchored" data-anchor-id="transfer-learning-1">Transfer Learning</h2>
<p>If you made it here, we’ll talk about deep learning’s most important tricks- transfer learning!</p>
<p>Neural networks are notoriously data hungry- they can eat millions of images and digest them to be able to generalize upon their features. In this case, what if you don’t have millions of images?</p>
<p>In this case, you use a model that has been trained on millions of images. And take it as your starting point. And train your model from them. Those massive datasets don’t necessarily have to be related to your image classes.</p>
<p>There are many publicly available models like resnet, xception, convnext (particular architectures of CNNs) trained on ImageNet dataset (a very large image dataset with 100+ different classes). You can simply download them, and use it for your task (classifying dogs), and it will work much better than defining a model from new.</p>
<p>We’ll implement a model using transfer learning below.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T12:36:19.734242Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T12:36:19.733878Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T12:36:21.707074Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T12:36:21.706057Z&quot;}" data-papermill="{&quot;duration&quot;:2.157794,&quot;end_time&quot;:&quot;2023-01-07T12:36:21.710237&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T12:36:19.552443&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="16">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="im" style="color: #00769E;">from</span> tensorflow.keras.applications <span class="im" style="color: #00769E;">import</span> ResNet50, Xception</span>
<span id="cb27-2"><span class="im" style="color: #00769E;">from</span> tensorflow.keras <span class="im" style="color: #00769E;">import</span> Input</span>
<span id="cb27-3"><span class="im" style="color: #00769E;">from</span> tensorflow.keras.models <span class="im" style="color: #00769E;">import</span> Model</span>
<span id="cb27-4"></span>
<span id="cb27-5"><span class="co" style="color: #5E5E5E;"># ResNet50 is our "backbone" of sorts, a CNN architecture </span></span>
<span id="cb27-6"><span class="co" style="color: #5E5E5E;"># pretrained on the imagenet dataset</span></span>
<span id="cb27-7"><span class="co" style="color: #5E5E5E;"># we are only taking the CNN portion of it (include_top = False)</span></span>
<span id="cb27-8"><span class="co" style="color: #5E5E5E;"># and dropping the dense layer, we'll initialize a dense network of our own</span></span>
<span id="cb27-9"></span>
<span id="cb27-10">basemodel <span class="op" style="color: #5E5E5E;">=</span> Xception(include_top <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span>, </span>
<span id="cb27-11">                   weights <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'imagenet'</span>,</span>
<span id="cb27-12">                  input_shape<span class="op" style="color: #5E5E5E;">=</span>(img_height, img_width, <span class="dv" style="color: #AD0000;">3</span>))</span>
<span id="cb27-13"></span>
<span id="cb27-14">basemodel.trainable <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">False</span></span>
<span id="cb27-15"></span>
<span id="cb27-16"><span class="co" style="color: #5E5E5E;"># use the output of the baseModel to create a "head"</span></span>
<span id="cb27-17">headModel <span class="op" style="color: #5E5E5E;">=</span> basemodel.output</span>
<span id="cb27-18">headModel <span class="op" style="color: #5E5E5E;">=</span> MaxPooling2D(pool_size<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">5</span>))(headModel)</span>
<span id="cb27-19">headModel <span class="op" style="color: #5E5E5E;">=</span> Flatten(name<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"flatten"</span>)(headModel)</span>
<span id="cb27-20">headModel <span class="op" style="color: #5E5E5E;">=</span> Dense(<span class="dv" style="color: #AD0000;">128</span>, activation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"relu"</span>)(headModel)</span>
<span id="cb27-21">headModel <span class="op" style="color: #5E5E5E;">=</span> Dropout(<span class="fl" style="color: #AD0000;">0.8</span>)(headModel)</span>
<span id="cb27-22"><span class="co" style="color: #5E5E5E;"># headModel = Dense(32, activation="relu")(headModel)</span></span>
<span id="cb27-23"><span class="co" style="color: #5E5E5E;"># headModel = Dropout(0.5)(headModel)</span></span>
<span id="cb27-24">headModel <span class="op" style="color: #5E5E5E;">=</span> Dense(<span class="dv" style="color: #AD0000;">2</span>, activation<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"softmax"</span>)(headModel)</span>
<span id="cb27-25"><span class="co" style="color: #5E5E5E;"># at the end, we'll have two neurons, for two of the classes</span></span>
<span id="cb27-26"></span>
<span id="cb27-27"><span class="co" style="color: #5E5E5E;"># we're "disabling" the backbone, and only training the head for this task</span></span>
<span id="cb27-28"><span class="co" style="color: #5E5E5E;"># we're assuming that the backbone is already sufficiently trained to generate</span></span>
<span id="cb27-29"><span class="co" style="color: #5E5E5E;"># features from images like ours.</span></span>
<span id="cb27-30"><span class="co" style="color: #5E5E5E;"># we can also "disable" all CNN layers except last 4</span></span>
<span id="cb27-31"></span>
<span id="cb27-32"><span class="co" style="color: #5E5E5E;"># create a model object</span></span>
<span id="cb27-33">model <span class="op" style="color: #5E5E5E;">=</span> Model(inputs<span class="op" style="color: #5E5E5E;">=</span>basemodel.<span class="bu" style="color: null;">input</span>, outputs<span class="op" style="color: #5E5E5E;">=</span>headModel)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/xception/xception_weights_tf_dim_ordering_tf_kernels_notop.h5
83689472/83683744 [==============================] - 1s 0us/step
83697664/83683744 [==============================] - 1s 0us/step</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T12:36:22.271148Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T12:36:22.270579Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T12:36:22.275448Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T12:36:22.274642Z&quot;}" data-papermill="{&quot;duration&quot;:0.294383,&quot;end_time&quot;:&quot;2023-01-07T12:36:22.279392&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T12:36:21.985009&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="17">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;"># plot_model(model, show_shapes=True, show_layer_names=False, dpi=60)</span></span></code></pre></div>
</div>
</section>
<section id="experiment-tracking" class="level2">
<h2 class="anchored" data-anchor-id="experiment-tracking">Experiment Tracking</h2>
<p>In earlier case, we plotted our losses and metrics after the training was done, manually using matplotlib. But there are tools available using which we can observe real-time how our training is progressing. They also log system metrics like GPU usage, and can keep track of multiple experiments, hyperparameters etc. One such tool is wandb.ai, using which you can track your model even on phone as it’s running in background.</p>
<p>Using it is very simple, signup on <a href="wandb.ai">wandb.ai</a>, and add only few lines of code. Get the API token, and go through <a href="https://www.kaggle.com/general/209530">this discussion</a> on how to add it as a kaggle secret.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T12:36:23.178436Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T12:36:23.178088Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T12:36:25.450810Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T12:36:25.449820Z&quot;}" data-papermill="{&quot;duration&quot;:2.457549,&quot;end_time&quot;:&quot;2023-01-07T12:36:25.453033&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T12:36:22.995484&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="18">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">use_wandb <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span> <span class="co" style="color: #5E5E5E;"># set to false if you don't want to use wandb for tracking</span></span>
<span id="cb30-2"><span class="cf" style="color: #003B4F;">if</span> use_wandb:</span>
<span id="cb30-3">    <span class="im" style="color: #00769E;">from</span> kaggle_secrets <span class="im" style="color: #00769E;">import</span> UserSecretsClient</span>
<span id="cb30-4">    <span class="im" style="color: #00769E;">import</span> wandb</span>
<span id="cb30-5">    <span class="im" style="color: #00769E;">from</span> wandb.keras <span class="im" style="color: #00769E;">import</span> WandbCallback</span>
<span id="cb30-6">    user_secrets <span class="op" style="color: #5E5E5E;">=</span> UserSecretsClient()</span>
<span id="cb30-7">    wandb_api <span class="op" style="color: #5E5E5E;">=</span> user_secrets.get_secret(<span class="st" style="color: #20794D;">"wandb_api"</span>)</span>
<span id="cb30-8">    wandb.login(key<span class="op" style="color: #5E5E5E;">=</span>wandb_api)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>wandb: W&amp;B API key is configured. Use `wandb login --relogin` to force relogin
wandb: WARNING If you're specifying your api key in code, ensure this code is not shared publicly.
wandb: WARNING Consider setting the WANDB_API_KEY environment variable, or running `wandb login` from the command line.
wandb: Appending key for api.wandb.ai to your netrc file: /root/.netrc</code></pre>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T12:36:25.823097Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T12:36:25.822725Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T12:36:32.713179Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T12:36:32.712167Z&quot;}" data-papermill="{&quot;duration&quot;:7.080441,&quot;end_time&quot;:&quot;2023-01-07T12:36:32.715909&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T12:36:25.635468&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="19">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="cf" style="color: #003B4F;">if</span> use_wandb:</span>
<span id="cb32-2">    wandb.init(project<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"keras_cats_and_dogs"</span>, config<span class="op" style="color: #5E5E5E;">=</span>{<span class="st" style="color: #20794D;">"batch_size"</span>: batch_size})</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>wandb: Currently logged in as: shindeshu. Use `wandb login --relogin` to force relogin</code></pre>
</div>
<div class="cell-output cell-output-display">
wandb version 0.13.7 is available!  To upgrade, please run:
 $ pip install wandb --upgrade
</div>
<div class="cell-output cell-output-display">
Tracking run with wandb version 0.12.21
</div>
<div class="cell-output cell-output-display">
Run data is saved locally in <code>/kaggle/working/wandb/run-20230107_123626-2bw5qpbs</code>
</div>
<div class="cell-output cell-output-display">
Syncing run <strong><a href="https://wandb.ai/shindeshu/keras_cats_and_dogs/runs/2bw5qpbs" target="_blank">fancy-plant-6</a></strong> to <a href="https://wandb.ai/shindeshu/keras_cats_and_dogs" target="_blank">Weights &amp; Biases</a> (<a href="https://wandb.me/run" target="_blank">docs</a>)<br>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T12:36:33.344004Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T12:36:33.343415Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T12:36:33.365175Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T12:36:33.364327Z&quot;}" data-papermill="{&quot;duration&quot;:0.366902,&quot;end_time&quot;:&quot;2023-01-07T12:36:33.367902&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T12:36:33.001000&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="20">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="im" style="color: #00769E;">from</span> tensorflow.keras.optimizers <span class="im" style="color: #00769E;">import</span> Adam</span>
<span id="cb34-2"><span class="im" style="color: #00769E;">from</span> tensorflow.keras.callbacks <span class="im" style="color: #00769E;">import</span> EarlyStopping</span>
<span id="cb34-3">opt <span class="op" style="color: #5E5E5E;">=</span> Adam(learning_rate<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.001</span>)</span>
<span id="cb34-4">model.<span class="bu" style="color: null;">compile</span>(loss<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'categorical_crossentropy'</span>, </span>
<span id="cb34-5">              optimizer<span class="op" style="color: #5E5E5E;">=</span>opt, </span>
<span id="cb34-6">              metrics<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'accuracy'</span>])</span></code></pre></div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T12:36:33.938057Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T12:36:33.937490Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T13:06:34.195009Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T13:06:34.194053Z&quot;}" data-papermill="{&quot;duration&quot;:1800.546907,&quot;end_time&quot;:&quot;2023-01-07T13:06:34.197419&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T12:36:33.650512&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="21">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">epochs<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb35-2">callbacks<span class="op" style="color: #5E5E5E;">=</span>[EarlyStopping(monitor<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'loss'</span>, patience<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>), ]</span>
<span id="cb35-3"><span class="cf" style="color: #003B4F;">if</span> use_wandb: callbacks.append(WandbCallback())</span>
<span id="cb35-4"></span>
<span id="cb35-5">history <span class="op" style="color: #5E5E5E;">=</span> model.fit_generator(</span>
<span id="cb35-6">    train_generator,</span>
<span id="cb35-7">    epochs<span class="op" style="color: #5E5E5E;">=</span>epochs,</span>
<span id="cb35-8">    validation_data<span class="op" style="color: #5E5E5E;">=</span>validation_generator,</span>
<span id="cb35-9">    callbacks<span class="op" style="color: #5E5E5E;">=</span>callbacks,</span>
<span id="cb35-10">)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>wandb: WARNING The save_model argument by default saves the model in the HDF5 format that cannot save custom objects like subclassed models and custom layers. This behavior will be deprecated in a future release in favor of the SavedModel format. Meanwhile, the HDF5 model is saved as W&amp;B files and the SavedModel as W&amp;B Artifacts.
/opt/conda/lib/python3.7/site-packages/keras/engine/training.py:1972: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.
  warnings.warn('`Model.fit_generator` is deprecated and '
2023-01-07 12:36:46.761375: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-01-07 12:36:46.761921: I tensorflow/core/grappler/devices.cc:66] Number of eligible GPUs (core count &gt;= 8, compute capability &gt;= 0.0): 1
2023-01-07 12:36:46.762185: I tensorflow/core/grappler/clusters/single_machine.cc:357] Starting new session
2023-01-07 12:36:46.765305: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-01-07 12:36:46.765841: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-01-07 12:36:46.766331: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-01-07 12:36:46.766954: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-01-07 12:36:46.767464: I tensorflow/stream_executor/cuda/cuda_gpu_executor.cc:937] successful NUMA node read from SysFS had negative value (-1), but there must be at least one NUMA node, so returning NUMA node zero
2023-01-07 12:36:46.767852: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1510] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 15401 MB memory:  -&gt; device: 0, name: Tesla P100-PCIE-16GB, pci bus id: 0000:00:04.0, compute capability: 6.0
2023-01-07 12:36:46.787714: I tensorflow/core/grappler/optimizers/meta_optimizer.cc:1137] Optimization results for grappler item: graph_to_optimize
  function_optimizer: function_optimizer did nothing. time = 0.01ms.
  function_optimizer: function_optimizer did nothing. time = 0.002ms.
</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 1/5
313/313 [==============================] - 350s 1s/step - loss: 0.1106 - accuracy: 0.9637 - val_loss: 0.0460 - val_accuracy: 0.9844</code></pre>
</div>
<div class="cell-output cell-output-stderr">
<pre><code>/opt/conda/lib/python3.7/site-packages/keras/utils/generic_utils.py:497: CustomMaskWarning: Custom mask layers require a config and must override get_config. When loading, the custom mask layer must be passed to the custom_objects argument.
  category=CustomMaskWarning)</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Epoch 2/5
313/313 [==============================] - 335s 1s/step - loss: 0.0764 - accuracy: 0.9768 - val_loss: 0.0479 - val_accuracy: 0.9828
Epoch 3/5
313/313 [==============================] - 334s 1s/step - loss: 0.0690 - accuracy: 0.9771 - val_loss: 0.0380 - val_accuracy: 0.9844
Epoch 4/5
313/313 [==============================] - 331s 1s/step - loss: 0.0626 - accuracy: 0.9792 - val_loss: 0.0399 - val_accuracy: 0.9854
Epoch 5/5
313/313 [==============================] - 337s 1s/step - loss: 0.0629 - accuracy: 0.9777 - val_loss: 0.0380 - val_accuracy: 0.9836</code></pre>
</div>
</div>
</section>
<section id="massive-improvement-using-transfer-learning" class="level2">
<h2 class="anchored" data-anchor-id="massive-improvement-using-transfer-learning">Massive Improvement Using Transfer Learning</h2>
<p>When we defined a custom model earlier, the best validation accuracy we got after 10 epochs was <strong>85%</strong>.</p>
<p>Here, by using a pre-trained model, our validation accuracy after 1 epoch is as high as <strong>98%</strong>!</p>
<p>As we can see, using a pre-trained model can really boost our performance with minimal training efforts.</p>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T13:06:35.271404Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T13:06:35.271028Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T13:06:35.565654Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T13:06:35.564802Z&quot;}" data-papermill="{&quot;duration&quot;:0.561439,&quot;end_time&quot;:&quot;2023-01-07T13:06:35.567660&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T13:06:35.006221&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="22">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">plot_loss(history)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://shindeshu.github.io/posts/tutorials/keras_cnns_intro_files/figure-html/cell-23-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution="{&quot;iopub.execute_input&quot;:&quot;2023-01-07T13:06:36.099744Z&quot;,&quot;iopub.status.busy&quot;:&quot;2023-01-07T13:06:36.099399Z&quot;,&quot;iopub.status.idle&quot;:&quot;2023-01-07T13:06:46.136502Z&quot;,&quot;shell.execute_reply&quot;:&quot;2023-01-07T13:06:46.135704Z&quot;}" data-papermill="{&quot;duration&quot;:10.306872,&quot;end_time&quot;:&quot;2023-01-07T13:06:46.141786&quot;,&quot;exception&quot;:false,&quot;start_time&quot;:&quot;2023-01-07T13:06:35.834914&quot;,&quot;status&quot;:&quot;completed&quot;}" data-tags="[]" data-execution_count="23">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">visualize_predictions(test_generator, model)</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://shindeshu.github.io/posts/tutorials/keras_cnns_intro_files/figure-html/cell-24-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>

 ]]></description>
  <category>getting-started</category>
  <category>deep-learning</category>
  <guid>https://shindeshu.github.io/posts/tutorials/keras_cnns_intro.html</guid>
  <pubDate>Sat, 14 Jan 2023 18:30:00 GMT</pubDate>
  <media:content url="https://shindeshu.github.io/posts/tutorials/assets/computer_vision.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Creating AI Art of Myself With Stable Diffusion + Dreambooth</title>
  <dc:creator>Shubham Shinde</dc:creator>
  <link>https://shindeshu.github.io/posts/stable_diff/getting_started_sd.html</link>
  <description><![CDATA[ 



<section id="what-is-stable-diffusion" class="level2">
<h2 class="anchored" data-anchor-id="what-is-stable-diffusion">What is Stable Diffusion</h2>
<p>For years, style transfer and image generation was the domain of an architecture called GANs. It produced results that were, well, not enough to impress a person not into the topic. And it look a lot of time, compute, and didn’t always converge. That is history anyway, so we do not need to trouble ourselves.</p>
<p>This year changed everything in generative AI. Three models, particularly Stable Diffusion took the world of art by storm. The text-to-image model could produce images with high fidelity, coherence, and able to produce images with so many styles. It was a 4GB checkpoint that contained in itself majority of the visual world created by man. With a bunch of text it could bring imagination to reality.</p>
</section>
<section id="the-magic" class="level2">
<h2 class="anchored" data-anchor-id="the-magic">The Magic</h2>
<p>All of these images are generated by AI completely on its own. There are some sites like <a href="lexica.art">lexica.art</a> where you can scroll through tons of AI-generated art like this, as well as the prompts that led to them.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/stable_diff/assets/art_ex3.webp" style="height:40.0%" class="figure-img"></p>
<p></p><figcaption class="figure-caption">Some Examples of AI generated art</figcaption><p></p>
</figure>
</div>
<p>You can try it for yourself at any one of the many huggingface spaces:</p>
<ul>
<li><a href="https://huggingface.co/spaces/runwayml/stable-diffusion-v1-5">App for Stability Diffusion 1.5</a></li>
<li><a href="https://huggingface.co/spaces/stabilityai/stable-diffusion">App for Stability Diffusion 2, recently released</a></li>
<li><a href="https://huggingface.co/spaces/anzorq/finetuned_diffusion">App that runs models for many styles</a></li>
</ul>
<p>It can take 10-20s to generate an image.</p>
<p>If you prefer a more hands-on approach, use this colab notebook - <a href="https://colab.research.google.com/github/TheLastBen/fast-stable-diffusion/blob/main/fast_stable_diffusion_AUTOMATIC1111.ipynb#scrollTo=PjzwxTkPSPHf">fast_stable_diffusion_AUTOMATIC1111.ipynb</a>, in this notebook, give the path to model hosted on huggingface (I used <code>runwayml/stable-diffusion-v1-5</code> for my base model). The notebook has all the code for installing dependencies, and will launch a GUI which you can use for experimentation.</p>
</section>
<section id="dreambooth" class="level2">
<h2 class="anchored" data-anchor-id="dreambooth">Dreambooth</h2>
<p>However, the publicly released stable diffusion model includes only those concepts, people, artstyles that were present in the training dataset of it. What if you want to add new people/concepts/styles, and use them to generate art?</p>
<p>That’s where dreambooth comes in. This technique allows you to add a person/concept to the stable diffusion model using only ~20 images of it, and takes only ~1 hour on free colab to train! Because of dreambooth, fine-tuning the stable diffusion model on a given style or person is a breeze.</p>
</section>
<section id="finetuning-approach" class="level2">
<h2 class="anchored" data-anchor-id="finetuning-approach">Finetuning Approach</h2>
<p>My primary resource for fine-tuning, i.e.&nbsp;adding myself to the stable diffusion space was this blog post: <a href="https://bytexd.com/how-to-use-dreambooth-to-fine-tune-stable-diffusion-colab/">How to Use DreamBooth to Fine-Tune Stable Diffusion (Colab)</a>. Which points to a beautiful colab notebook - <a href="https://colab.research.google.com/github/TheLastBen/fast-stable-diffusion/blob/main/fast-DreamBooth.ipynb#scrollTo=iAZGngFcI8hq">TheLastBen/fast-stable-diffusion</a>, which has it all ready- you only need to give the links to the base model, huggingface token (you need to signup to this website), and upload your images, and hit train.</p>
<p>Follow the advice in the blogpost and the notebook, and you’ll have a gradio app in your browser. Now you can add any text prompt you want in the text box, and generate results!</p>
</section>
<section id="finding-the-right-prompts" class="level2">
<h2 class="anchored" data-anchor-id="finding-the-right-prompts">Finding the Right Prompts</h2>
<p>Yeah, except, <em>any</em> prompt will not give you the best results. Prompt Engineering is a big deal here. You have to construct a prompt, add labels and styles in order to direct the model to get an acceptable image. You also can tinker with the hyperparameters- adjust the CFG scale, sampling steps, to get better results.</p>
<p>My experience- prompt engineering sucks. It’s more of an art that engineering, and there’s no other way but trial and error. Fortunately there are resources on the internet that can help you.</p>
<p>For me the process looked like:</p>
<ol type="1">
<li>Go to a resource like <a href="lexica.art">lexica.art</a>, and find an image you like</li>
<li>Copy the prompt and settings, and modify the prompt to include your token used during training.</li>
</ol>
<p>This will generally give you good results, and how I got most of my good images. However tuning of hyperparameters requireds trial and error, and hence time. I didn’t spend too much time on this, so I fixed my sampling method at euler-a and steps at 40-50. I only tinked with CFG scale.</p>
</section>
<section id="results-on-myself" class="level2">
<h2 class="anchored" data-anchor-id="results-on-myself">Results on Myself</h2>
<p>Finally, the meat of the post- let’s see the actual results on myself.</p>
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://shindeshu.github.io/posts/stable_diff/assets/port1.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://shindeshu.github.io/posts/stable_diff/assets/port2.png" class="img-fluid"></p>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p><img src="https://shindeshu.github.io/posts/stable_diff/assets/port3.png" class="img-fluid"></p>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/stable_diff/assets/port6.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">As a Naruto(?) Character</figcaption><p></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/stable_diff/assets/port5.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Style of Japanese Woodblock</figcaption><p></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/stable_diff/assets/shubham_pixar.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Me As a Pixar Character</figcaption><p></p>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<p>Some Portraits of Me</p>
</div>
</div>
</div>
<p>Some generated art of my wife and me.</p>
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/stable_diff/assets/ss1.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">As a Disney Princess</figcaption><p></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/stable_diff/assets/ss2.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">As a Studio Ghibli Character</figcaption><p></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/stable_diff/assets/ss3.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">As Pixar Characters</figcaption><p></p>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/stable_diff/assets/ss4.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Anime Character</figcaption><p></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/stable_diff/assets/ss5.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Stylized Portrait</figcaption><p></p>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 33.3%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/stable_diff/assets/ss6.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">As a Japanese Woodblock</figcaption><p></p>
</figure>
</div>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>ai-art</category>
  <guid>https://shindeshu.github.io/posts/stable_diff/getting_started_sd.html</guid>
  <pubDate>Tue, 29 Nov 2022 18:30:00 GMT</pubDate>
  <media:content url="https://shindeshu.github.io/posts/stable_diff/assets/art_ex3.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Implementing a Graph Neural Network from Scratch</title>
  <dc:creator>Shubham Shinde</dc:creator>
  <link>https://shindeshu.github.io/posts/gnns/gnn_from_scratch.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/gnns/graph_cat.jpg" class="img-fluid figure-img" style="width:50.0%"></p>
<p></p><figcaption class="figure-caption">Let’s Build a GNN</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="https://colab.research.google.com/github/shindeshu/gnn_from_scratch.ipynb"><img src="https://shindeshu.github.io/posts/gnns/https:/colab.research.google.com/assets/colab-badge.svg" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Open In Colab</figcaption><p></p>
</figure>
</div>
<p>If you are unfamiliar with GNNs in general, please go through my small <a href="https://shindeshu.github.io/posts/gnns/intro_gnn.html">intro blogpost</a>. Message Passing is one of the more popular concepts in GNNs, and that is what we’ll try to implement here. Specifically we are implementing the Graph Convolutional Layer/Network proposed by Kipf et al in 2016. You can go through a detailed <a href="https://tkipf.github.io/graph-convolutional-networks/">blogpost</a> of his or the <a href="https://arxiv.org/abs/1609.02907">original paper</a>.</p>
<section id="representing-a-graph" class="level2">
<h2 class="anchored" data-anchor-id="representing-a-graph">Representing a Graph</h2>
<p>Before we start on to Graph convolutions, let’s first present it out on how do we represent a graph in code. Mathematically, a graph is defined as a tuple of a set of nodes/vertices <img src="https://shindeshu.github.io/posts/gnns/https:/render.githubusercontent.com/render/math?math=V">, and a set of edges/links <img src="https://shindeshu.github.io/posts/gnns/https:/render.githubusercontent.com/render/math?math=E:/mathcal{G}=(V,E)">. Further, each edge is a pair of two vertices, and represents a connection between them.</p>
<p>Visually, a graph would look something like this:</p>
<center width="100%" style="padding:10px">
<img src="https://shindeshu.github.io/posts/gnns/https:/www.researchgate.net/profile/Wei-Dong-51/publication/235973074/figure/fig1/AS:393538677297153@1470838340530/A-small-example-graph-representation-of-a-network-with-8-nodes-and-14-undirected-edges.png" width="350px">
</center>
<p>The vertices are <img src="https://shindeshu.github.io/posts/gnns/https:/render.githubusercontent.com/render/math?math=V=/{1,2,3,4,5,6,7,8/}">, and edges <img src="https://shindeshu.github.io/posts/gnns/https:/render.githubusercontent.com/render/math?math=E=/{(1,5), (2,1), (2,8), (3,4), .../}">.</p>
<p>There are many ways to represent graphs in memory- two of them include “adjacency matrix” (<img src="https://latex.codecogs.com/png.latex?a">) and “edge list”. If the number of nodes is <img src="https://latex.codecogs.com/png.latex?n">, the adjacency matrix is <img src="https://latex.codecogs.com/png.latex?n%20x%20n">. If there’s an edge from node <img src="https://latex.codecogs.com/png.latex?n_i"> to <img src="https://latex.codecogs.com/png.latex?n_j">, the element <img src="https://latex.codecogs.com/png.latex?a_%7Bij%7D"> is equal to 1. Likewise, the other elements of <img src="https://latex.codecogs.com/png.latex?a"> are populated.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">[[ <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">0</span> ]</span>
<span id="cb1-2"> [ <span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">1</span> ]</span>
<span id="cb1-3"> [ <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">1</span> ]</span>
<span id="cb1-4"> [ <span class="dv" style="color: #AD0000;">0</span> <span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">1</span> <span class="dv" style="color: #AD0000;">0</span> ]]</span></code></pre></div>
<p>Working with adjacency matrix for graph operations is easier, although they have their limitations. While established libraries like <code>dgl</code> or <code>pytorch-geometric</code> use edge-list format of data, here we are working with an adjacency matrix.</p>
</section>
<section id="graph-convolutions" class="level2">
<h2 class="anchored" data-anchor-id="graph-convolutions">Graph Convolutions</h2>
<p>Graph convolutions are somewhat similar to image convolutions, in that they take their neighbourhood information and aggregate to get a richer understanding of their position. Also, the “parameters” of the filters are shared across the entire image, which is analogous to a graph convolution as well, where the parameters are shared across the graph.</p>
<p>GCNs rely on the message passing paradigm. Each node has a feature vector associated with it. For a given node u, each of its neighbouring nodes <img src="https://latex.codecogs.com/png.latex?v_i"> send a message derived from its feature vector to it. All these messages are aggregated alongwith its own feature vector, and this is used to update this node <img src="https://latex.codecogs.com/png.latex?u"> to get the final feature vector (or embedding).</p>
</section>
<section id="current-implementation" class="level2">
<h2 class="anchored" data-anchor-id="current-implementation">Current Implementation</h2>
<p>Each node has a feature vector. This feature will be projected using a linear layer, output of which will be the message that each node passes. We will represent the graph as an adjacency matrix, and multiply by the node features (projected) to perform the message passing. This will be divided by the number of neighbours for normalizing, which will give us the output of our first graph convolution layer.</p>
<p>Importing all our libraries. We are not using libraries like <code>dgl</code> or <code>pytorch-geometric</code>, we will be using plain pytorch. We are also using <code>networkx</code> for manipulating graph.</p>
<p>We will be a creating a random matrix as an adjacency matrix. Creating a matrix with uniform_ method and the bernoulli method.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">nodes <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb2-2">node_features_size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb2-3"></span>
<span id="cb2-4">adj <span class="op" style="color: #5E5E5E;">=</span> torch.empty(nodes, nodes).uniform_(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>).bernoulli()</span></code></pre></div>
</div>
<p>Visualizing the graph we created with networkx library</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">graph <span class="op" style="color: #5E5E5E;">=</span> nx.from_numpy_matrix(adj.numpy())</span>
<span id="cb3-2">graph.remove_edges_from(nx.selfloop_edges(graph))</span>
<span id="cb3-3"></span>
<span id="cb3-4">pos <span class="op" style="color: #5E5E5E;">=</span> nx.kamada_kawai_layout(graph)</span>
<span id="cb3-5">nx.draw(graph, pos, with_labels<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/gnns/gnn_from_scratch_files/gnn_from_scratch_12_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p>Creating random features for our nodes. These features will go through a dense layer and then act as our messages.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">node_features <span class="op" style="color: #5E5E5E;">=</span> torch.empty(nodes, node_features_size).uniform_(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>).bernoulli()<span class="co" style="color: #5E5E5E;">#.view(1, nodes, node_features_size)</span></span>
<span id="cb4-2">node_features</span></code></pre></div>
</div>
<p>The features will pass through a linear layer to create our messages</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">projector <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(node_features_size, <span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb5-2"></span>
<span id="cb5-3">node_feat_proj <span class="op" style="color: #5E5E5E;">=</span> projector(node_features)</span>
<span id="cb5-4"></span>
<span id="cb5-5">num_neighbours <span class="op" style="color: #5E5E5E;">=</span> adj.<span class="bu" style="color: null;">sum</span>(dim<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>, keepdims<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7">torch.matmul(adj, node_feat_proj)<span class="op" style="color: #5E5E5E;">/</span>num_neighbours</span></code></pre></div>
</div>
<pre><code>tensor([[-0.5067, -0.2463, -0.0555,  0.2188,  0.4031],
            [-0.8397,  0.0945,  0.5124,  0.1179, -0.0296],
            [-0.6457,  0.2369,  0.5048, -0.0216,  0.1531],
            [-0.9893,  0.4223,  0.7235,  0.3212, -0.1165],
            [-0.5876,  0.2246,  0.5227, -0.1519,  0.1979],
            [-0.6133, -0.0359,  0.2532,  0.0760,  0.2250],
            [-0.7740,  0.2055,  0.5252,  0.1075,  0.0174],
            [-0.7827,  0.1653,  0.5654,  0.0135, -0.0155],
            [-0.8635,  0.3189,  0.6940,  0.0758, -0.0423],
            [-0.9374,  0.2670,  0.6672,  0.1805, -0.1292]], grad_fn=&lt;DivBackward0&gt;)</code></pre>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">adj.shape, node_feat_proj.shape</span></code></pre></div>
</div>
<pre><code>(torch.Size([10, 10]), torch.Size([10, 5]))</code></pre>
</section>
<section id="a-note-on-above-multiplication-operation" class="level2">
<h2 class="anchored" data-anchor-id="a-note-on-above-multiplication-operation">A Note on Above Multiplication Operation</h2>
<p>How it does achieve our objective, i.e.&nbsp;summing up of messages from neighbouring nodes of a particular node?</p>
<p>For simplicity, lets take an example where the adj matrix is $ 7 $ and the message matrix is $ 7 $.</p>
<p>Consider a single row from the adjacency matrix, that corresponds to a node <img src="https://latex.codecogs.com/png.latex?n_i">. It might look something like <img src="https://latex.codecogs.com/png.latex?%0AA%20=%20%5Cbegin%7Bbmatrix%7D%0A%20%20%20%200%20&amp;%201%20&amp;%200%20&amp;%200%20&amp;%201%20&amp;%200%20&amp;%201%5C%5C%0A%5Cend%7Bbmatrix%7D%0A"></p>
<p>And the message matrix is <img src="https://latex.codecogs.com/png.latex?7%20%5Ctimes%205">. (seven rows, five columns).</p>
<p>For this node, we can observe there are edges existent only for nodes <img src="https://latex.codecogs.com/png.latex?%7B2,%205,%207%7D">. When we multiple the above matrix with the message/feature matrix, we will get the elements corresponding to those indexes summed up (since others are multiplied by zero), along the second axis of the feature matrix i.e.&nbsp;we will get a <img src="https://latex.codecogs.com/png.latex?1%20%5Ctimes%205"> size vector.</p>
<p>Here, you can see that only the neighbouring nodes’ features have been summed up to get the final d-length vector.</p>
</section>
<section id="putting-it-all-together" class="level2">
<h2 class="anchored" data-anchor-id="putting-it-all-together">Putting It All Together</h2>
<p>Now that we’ve done it step-by-step, let us aggregate the operations together in proper functions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;">class</span> GCNLayer(nn.Module):</span>
<span id="cb9-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, in_feat, out_feat):</span>
<span id="cb9-3">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb9-4">        <span class="va" style="color: #111111;">self</span>.projector <span class="op" style="color: #5E5E5E;">=</span> nn.Linear(in_feat, out_feat)</span>
<span id="cb9-5"></span>
<span id="cb9-6">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, node_features, adj):</span>
<span id="cb9-7">        num_neighbours <span class="op" style="color: #5E5E5E;">=</span> adj.<span class="bu" style="color: null;">sum</span>(dim<span class="op" style="color: #5E5E5E;">=-</span><span class="dv" style="color: #AD0000;">1</span>, keepdims<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span>
<span id="cb9-8">        node_features <span class="op" style="color: #5E5E5E;">=</span> torch.relu(<span class="va" style="color: #111111;">self</span>.projector(node_features))</span>
<span id="cb9-9">        node_features <span class="op" style="color: #5E5E5E;">=</span> torch.matmul(adj, node_features)</span>
<span id="cb9-10">        node_features <span class="op" style="color: #5E5E5E;">=</span> node_features <span class="op" style="color: #5E5E5E;">/</span> num_neighbours</span>
<span id="cb9-11">        node_features <span class="op" style="color: #5E5E5E;">=</span> torch.relu(node_features)</span>
<span id="cb9-12">        <span class="cf" style="color: #003B4F;">return</span> node_features</span>
<span id="cb9-13">layer1 <span class="op" style="color: #5E5E5E;">=</span> GCNLayer(node_features_size, <span class="dv" style="color: #AD0000;">8</span>)</span>
<span id="cb9-14">layer1(node_features, adj).shape</span></code></pre></div>
</div>
<pre><code>torch.Size([10, 8])</code></pre>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">layer2 <span class="op" style="color: #5E5E5E;">=</span> GCNLayer(<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb11-2">layer2(layer1(node_features, adj), adj)</span></code></pre></div>
</div>
<pre><code>tensor([[0.4279, 0.4171],
            [0.4724, 0.4304],
            [0.4318, 0.3761],
            [0.4315, 0.3860],
            [0.4520, 0.4132],
            [0.4449, 0.4049],
            [0.4346, 0.3827],
            [0.4614, 0.4176],
            [0.4446, 0.3860],
            [0.4068, 0.3582]], grad_fn=&lt;ReluBackward0&gt;)</code></pre>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;">class</span> GCNmodel(nn.Module):</span>
<span id="cb13-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, in_feat, hid_feat, out_feat):</span>
<span id="cb13-3">        <span class="bu" style="color: null;">super</span>().<span class="fu" style="color: #4758AB;">__init__</span>()</span>
<span id="cb13-4">        <span class="va" style="color: #111111;">self</span>.gcn_layer1 <span class="op" style="color: #5E5E5E;">=</span> GCNLayer(in_feat, hid_feat)</span>
<span id="cb13-5">        <span class="va" style="color: #111111;">self</span>.gcn_layer2 <span class="op" style="color: #5E5E5E;">=</span> GCNLayer(hid_feat, out_feat)</span>
<span id="cb13-6"></span>
<span id="cb13-7">    <span class="kw" style="color: #003B4F;">def</span> forward(<span class="va" style="color: #111111;">self</span>, node_features, adj):</span>
<span id="cb13-8">        h <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.gcn_layer1(node_features, adj)</span>
<span id="cb13-9">        h <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.gcn_layer2(h, adj)</span>
<span id="cb13-10">        <span class="cf" style="color: #003B4F;">return</span> h</span>
<span id="cb13-11">model <span class="op" style="color: #5E5E5E;">=</span> GCNmodel(node_features_size, <span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">2</span>)</span></code></pre></div>
</div>
</section>
<section id="solving-a-real-problem" class="level2">
<h2 class="anchored" data-anchor-id="solving-a-real-problem">Solving a Real Problem</h2>
<p>Now that we are able to play around with random data, lets us get to work on some real datasets that we can do basic classification problems on. We will be using the zachary’s karate club dataset, which is a small dataset of 34 people and the edges include their observed interactions with each other. Our objective: predict which group will each of the people go to once their club is bisected.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;">def</span> build_karate_club_graph():</span>
<span id="cb14-2">    g <span class="op" style="color: #5E5E5E;">=</span> nx.Graph()</span>
<span id="cb14-3">    edge_list <span class="op" style="color: #5E5E5E;">=</span> [(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>), (<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">1</span>), (<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb14-4">        (<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">4</span>), (<span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">5</span>), (<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb14-5">        (<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">2</span>), (<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">3</span>), (<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">2</span>), (<span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">2</span>), (<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">4</span>),</span>
<span id="cb14-6">        (<span class="dv" style="color: #AD0000;">10</span>, <span class="dv" style="color: #AD0000;">5</span>), (<span class="dv" style="color: #AD0000;">11</span>, <span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">12</span>, <span class="dv" style="color: #AD0000;">3</span>), (<span class="dv" style="color: #AD0000;">13</span>, <span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">13</span>, <span class="dv" style="color: #AD0000;">1</span>), (<span class="dv" style="color: #AD0000;">13</span>, <span class="dv" style="color: #AD0000;">2</span>),</span>
<span id="cb14-7">        (<span class="dv" style="color: #AD0000;">13</span>, <span class="dv" style="color: #AD0000;">3</span>), (<span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">5</span>), (<span class="dv" style="color: #AD0000;">16</span>, <span class="dv" style="color: #AD0000;">6</span>), (<span class="dv" style="color: #AD0000;">17</span>, <span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">17</span>, <span class="dv" style="color: #AD0000;">1</span>), (<span class="dv" style="color: #AD0000;">19</span>, <span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">19</span>, <span class="dv" style="color: #AD0000;">1</span>),</span>
<span id="cb14-8">        (<span class="dv" style="color: #AD0000;">21</span>, <span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">21</span>, <span class="dv" style="color: #AD0000;">1</span>), (<span class="dv" style="color: #AD0000;">25</span>, <span class="dv" style="color: #AD0000;">23</span>), (<span class="dv" style="color: #AD0000;">25</span>, <span class="dv" style="color: #AD0000;">24</span>), (<span class="dv" style="color: #AD0000;">27</span>, <span class="dv" style="color: #AD0000;">2</span>), (<span class="dv" style="color: #AD0000;">27</span>, <span class="dv" style="color: #AD0000;">23</span>),</span>
<span id="cb14-9">        (<span class="dv" style="color: #AD0000;">27</span>, <span class="dv" style="color: #AD0000;">24</span>), (<span class="dv" style="color: #AD0000;">28</span>, <span class="dv" style="color: #AD0000;">2</span>), (<span class="dv" style="color: #AD0000;">29</span>, <span class="dv" style="color: #AD0000;">23</span>), (<span class="dv" style="color: #AD0000;">29</span>, <span class="dv" style="color: #AD0000;">26</span>), (<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">1</span>), (<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">8</span>),</span>
<span id="cb14-10">        (<span class="dv" style="color: #AD0000;">31</span>, <span class="dv" style="color: #AD0000;">0</span>), (<span class="dv" style="color: #AD0000;">31</span>, <span class="dv" style="color: #AD0000;">24</span>), (<span class="dv" style="color: #AD0000;">31</span>, <span class="dv" style="color: #AD0000;">25</span>), (<span class="dv" style="color: #AD0000;">31</span>, <span class="dv" style="color: #AD0000;">28</span>), (<span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">2</span>), (<span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">8</span>),</span>
<span id="cb14-11">        (<span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">14</span>), (<span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">15</span>), (<span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">18</span>), (<span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">20</span>), (<span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">22</span>), (<span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">23</span>),</span>
<span id="cb14-12">        (<span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">29</span>), (<span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">30</span>), (<span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">31</span>), (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">8</span>), (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">9</span>), (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">13</span>),</span>
<span id="cb14-13">        (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">14</span>), (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">15</span>), (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">18</span>), (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">19</span>), (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">20</span>), (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">22</span>),</span>
<span id="cb14-14">        (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">23</span>), (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">26</span>), (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">27</span>), (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">28</span>), (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">29</span>), (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">30</span>),</span>
<span id="cb14-15">        (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">31</span>), (<span class="dv" style="color: #AD0000;">33</span>, <span class="dv" style="color: #AD0000;">32</span>)]</span>
<span id="cb14-16">    g.add_edges_from(edge_list)</span>
<span id="cb14-17">    <span class="cf" style="color: #003B4F;">return</span> g</span>
<span id="cb14-18"></span>
<span id="cb14-19">g <span class="op" style="color: #5E5E5E;">=</span> build_karate_club_graph()</span></code></pre></div>
</div>
<p>Visualizing our karate club graph:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">pos <span class="op" style="color: #5E5E5E;">=</span> nx.kamada_kawai_layout(g)</span>
<span id="cb15-2">nx.draw(g, pos, with_labels<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)</span></code></pre></div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/gnns/gnn_from_scratch_files/gnn_from_scratch_35_0.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">png</figcaption><p></p>
</figure>
</div>
<p>We don’t have any node features. So here we’re creating a one-hot vector for each node based on its id. Together, it’d be a single identity matrix for the graph.</p>
<p>At the beginning, only the instructor and president nodes are labelled. Later on each person will join one of the groups headed by these two. So it’s a binary classification, and the only labeled nodes we have are two.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">node_features <span class="op" style="color: #5E5E5E;">=</span>  torch.eye(<span class="dv" style="color: #AD0000;">34</span>) </span>
<span id="cb16-2">labeled_nodes <span class="op" style="color: #5E5E5E;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">33</span>])  <span class="co" style="color: #5E5E5E;"># only the instructor and the president nodes are labeled</span></span>
<span id="cb16-3">labels <span class="op" style="color: #5E5E5E;">=</span> torch.tensor([<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb16-4"></span>
<span id="cb16-5"><span class="co" style="color: #5E5E5E;"># since our code only works on adjacency matrix and not on edge-list</span></span>
<span id="cb16-6"></span>
<span id="cb16-7">adj_matrix <span class="op" style="color: #5E5E5E;">=</span> torch.from_numpy(nx.adjacency_matrix(g).todense()).<span class="bu" style="color: null;">float</span>()</span>
<span id="cb16-8"></span>
<span id="cb16-9"><span class="co" style="color: #5E5E5E;"># define our gcn model</span></span>
<span id="cb16-10"></span>
<span id="cb16-11">model <span class="op" style="color: #5E5E5E;">=</span> GCNmodel(<span class="dv" style="color: #AD0000;">34</span>, <span class="dv" style="color: #AD0000;">32</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb16-12"></span>
<span id="cb16-13"><span class="co" style="color: #5E5E5E;"># do a single pass just for a check</span></span>
<span id="cb16-14"></span>
<span id="cb16-15">model(node_features, adj_matrix)</span></code></pre></div>
</div>
<p>Lets get to the meat of it: time to train our model. We create the usual pytorch pipeline. If you’ve worked with pytorch before, this is familiar to you. Even if not, you can get a certain idea if you know some basics of neural networks / backprop.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">optimizer <span class="op" style="color: #5E5E5E;">=</span> torch.optim.Adam(model.parameters(), lr<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">0.01</span>)</span>
<span id="cb17-2">all_logits <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb17-3"><span class="cf" style="color: #003B4F;">for</span> epoch <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">100</span>):</span>
<span id="cb17-4">    logits <span class="op" style="color: #5E5E5E;">=</span> model(node_features, adj_matrix)</span>
<span id="cb17-5">    <span class="co" style="color: #5E5E5E;"># we save the logits for visualization later</span></span>
<span id="cb17-6">    all_logits.append(logits.detach())</span>
<span id="cb17-7">    logp <span class="op" style="color: #5E5E5E;">=</span> F.log_softmax(logits, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb17-8">    <span class="co" style="color: #5E5E5E;"># we only compute loss for labeled nodes</span></span>
<span id="cb17-9">    loss <span class="op" style="color: #5E5E5E;">=</span> F.nll_loss(logp[labeled_nodes], labels)</span>
<span id="cb17-10"></span>
<span id="cb17-11">    optimizer.zero_grad()</span>
<span id="cb17-12">    loss.backward()</span>
<span id="cb17-13">    optimizer.step()</span>
<span id="cb17-14"></span>
<span id="cb17-15">    <span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'Epoch </span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;"> | Loss: </span><span class="sc" style="color: #5E5E5E;">%.4f</span><span class="st" style="color: #20794D;">'</span> <span class="op" style="color: #5E5E5E;">%</span> (epoch, loss.item()))</span></code></pre></div>
</div>
<pre><code>    Epoch 0 | Loss: 0.6887
    Epoch 1 | Loss: 0.6823
    Epoch 2 | Loss: 0.6756
    Epoch 3 | Loss: 0.6704
    Epoch 4 | Loss: 0.6653
    Epoch 5 | Loss: 0.6592
    Epoch 6 | Loss: 0.6529
    Epoch 7 | Loss: 0.6465
    Epoch 8 | Loss: 0.6396
    Epoch 9 | Loss: 0.6320
    Epoch 10 | Loss: 0.6239
    Epoch 11 | Loss: 0.6151
    Epoch 12 | Loss: 0.6064
    Epoch 13 | Loss: 0.5973
    Epoch 14 | Loss: 0.5878
    Epoch 15 | Loss: 0.5783
    Epoch 16 | Loss: 0.5686
    Epoch 17 | Loss: 0.5585
    Epoch 18 | Loss: 0.5482
    Epoch 19 | Loss: 0.5382
    Epoch 20 | Loss: 0.5281
    Epoch 21 | Loss: 0.5182
    Epoch 22 | Loss: 0.5085
    Epoch 23 | Loss: 0.4990
    Epoch 24 | Loss: 0.4899
    Epoch 25 | Loss: 0.4810
    Epoch 26 | Loss: 0.4725
    Epoch 27 | Loss: 0.4642
    Epoch 28 | Loss: 0.4560
    Epoch 29 | Loss: 0.4477
    Epoch 30 | Loss: 0.4397
    Epoch 31 | Loss: 0.4331
    Epoch 32 | Loss: 0.4267
    Epoch 33 | Loss: 0.4204
    Epoch 34 | Loss: 0.4143
    Epoch 35 | Loss: 0.4082
    Epoch 36 | Loss: 0.4037
    Epoch 37 | Loss: 0.3994
    Epoch 38 | Loss: 0.3952
    Epoch 39 | Loss: 0.3911
    Epoch 40 | Loss: 0.3873
    Epoch 41 | Loss: 0.3837
    Epoch 42 | Loss: 0.3802
    Epoch 43 | Loss: 0.3767
    Epoch 44 | Loss: 0.3733
    Epoch 45 | Loss: 0.3698
    Epoch 46 | Loss: 0.3670
    Epoch 47 | Loss: 0.3655
    Epoch 48 | Loss: 0.3638
    Epoch 49 | Loss: 0.3620
    Epoch 50 | Loss: 0.3602
    Epoch 51 | Loss: 0.3586
    Epoch 52 | Loss: 0.3571
    Epoch 53 | Loss: 0.3573
    Epoch 54 | Loss: 0.3564
    Epoch 55 | Loss: 0.3544
    Epoch 56 | Loss: 0.3542
    Epoch 57 | Loss: 0.3539
    Epoch 58 | Loss: 0.3536
    Epoch 59 | Loss: 0.3533
    Epoch 60 | Loss: 0.3529
    Epoch 61 | Loss: 0.3525
    Epoch 62 | Loss: 0.3522
    Epoch 63 | Loss: 0.3518
    Epoch 64 | Loss: 0.3514
    Epoch 65 | Loss: 0.3511
    Epoch 66 | Loss: 0.3508
    Epoch 67 | Loss: 0.3505
    Epoch 68 | Loss: 0.3502
    Epoch 69 | Loss: 0.3504
    Epoch 70 | Loss: 0.3498
    Epoch 71 | Loss: 0.3497
    Epoch 72 | Loss: 0.3439
    Epoch 73 | Loss: 0.3194
    Epoch 74 | Loss: 0.2869
    Epoch 75 | Loss: 0.2505
    Epoch 76 | Loss: 0.2138
    Epoch 77 | Loss: 0.1789
    Epoch 78 | Loss: 0.1476
    Epoch 79 | Loss: 0.1206
    Epoch 80 | Loss: 0.0984
    Epoch 81 | Loss: 0.0811
    Epoch 82 | Loss: 0.0682
    Epoch 83 | Loss: 0.0587
    Epoch 84 | Loss: 0.0516
    Epoch 85 | Loss: 0.0459
    Epoch 86 | Loss: 0.0407
    Epoch 87 | Loss: 0.0356
    Epoch 88 | Loss: 0.0307
    Epoch 89 | Loss: 0.0262
    Epoch 90 | Loss: 0.0223
    Epoch 91 | Loss: 0.0191
    Epoch 92 | Loss: 0.0164
    Epoch 93 | Loss: 0.0142
    Epoch 94 | Loss: 0.0124
    Epoch 95 | Loss: 0.0111
    Epoch 96 | Loss: 0.0101
    Epoch 97 | Loss: 0.0093
    Epoch 98 | Loss: 0.0087
    Epoch 99 | Loss: 0.0081</code></pre>
<p>We can see the loss converging. This dataset doesn’t really have a valid set or anything, so there are no metrics to be presented here. But we can visualize them directly which can be fun to see. Here, we can create an animation of the results of each epoch, and watch them fluctuate as the model converges.</p>
<p>This vis code was taken from <a href="https://docs.dgl.ai/en/0.2.x/tutorials/basics/1_first.html">dgl documentation</a>. The dgl docs are a great place to start learning about graph neural networks!</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;">import</span> matplotlib.animation <span class="im" style="color: #00769E;">as</span> animation</span>
<span id="cb19-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="kw" style="color: #003B4F;">def</span> draw(i):</span>
<span id="cb19-5">    cls1color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'#00FFFF'</span></span>
<span id="cb19-6">    cls2color <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'#FF00FF'</span></span>
<span id="cb19-7">    pos <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb19-8">    colors <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb19-9">    <span class="cf" style="color: #003B4F;">for</span> v <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">34</span>):</span>
<span id="cb19-10">        pos[v] <span class="op" style="color: #5E5E5E;">=</span> all_logits[i][v].numpy()</span>
<span id="cb19-11">        cls <span class="op" style="color: #5E5E5E;">=</span> pos[v].argmax()</span>
<span id="cb19-12">        colors.append(cls1color <span class="cf" style="color: #003B4F;">if</span> cls <span class="cf" style="color: #003B4F;">else</span> cls2color)</span>
<span id="cb19-13">    ax.cla()</span>
<span id="cb19-14">    ax.axis(<span class="st" style="color: #20794D;">'off'</span>)</span>
<span id="cb19-15">    ax.set_title(<span class="st" style="color: #20794D;">'Epoch: </span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">'</span> <span class="op" style="color: #5E5E5E;">%</span> i)</span>
<span id="cb19-16">    pos <span class="op" style="color: #5E5E5E;">=</span> nx.kamada_kawai_layout(g)</span>
<span id="cb19-17">    nx.draw_networkx(g.to_undirected(), pos, node_color<span class="op" style="color: #5E5E5E;">=</span>colors,</span>
<span id="cb19-18">            with_labels<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, node_size<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">300</span>, ax<span class="op" style="color: #5E5E5E;">=</span>ax)</span>
<span id="cb19-19"></span>
<span id="cb19-20">fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(dpi<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">150</span>)</span>
<span id="cb19-21">fig.clf()</span>
<span id="cb19-22">ax <span class="op" style="color: #5E5E5E;">=</span> fig.subplots()</span>
<span id="cb19-23">draw(<span class="dv" style="color: #AD0000;">0</span>)  <span class="co" style="color: #5E5E5E;"># draw the prediction of the first epoch</span></span>
<span id="cb19-24">plt.close()</span>
<span id="cb19-25"></span>
<span id="cb19-26">ani <span class="op" style="color: #5E5E5E;">=</span> animation.FuncAnimation(fig, draw, frames<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">len</span>(all_logits), interval<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">200</span>)</span>
<span id="cb19-27"></span>
<span id="cb19-28">ani.save(<span class="st" style="color: #20794D;">"karate.gif"</span>, writer<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"pillow"</span>)</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>deep-learning</category>
  <guid>https://shindeshu.github.io/posts/gnns/gnn_from_scratch.html</guid>
  <pubDate>Mon, 24 Jan 2022 18:30:00 GMT</pubDate>
  <media:content url="https://shindeshu.github.io/posts/gnns/graph_cat.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A Brief Intro To Graph Neural Networks</title>
  <dc:creator>Shubham Shinde</dc:creator>
  <link>https://shindeshu.github.io/posts/gnns/intro_to_gnn.html</link>
  <description><![CDATA[ 



<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://shindeshu.github.io/posts/gnns/graph_img.jpeg" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">graph-img</figcaption><p></p>
</figure>
</div>
<p>Deep Learning has revolutionized machine learning on all types of tasks ranging from computer vision to natural language processing or sequence modeling. Most of these applications however involve mostly euclidean data that are constrained to some fixed dimensions.</p>
<p>What happens when your data is of non-euclidean nature? Graphs are one way to represent such non-euclidean data, which represent it in form of objects linked with each other through relationships. Machine learning using graphs has always been around, however with the advances in deep learning, recently there have been some exciting developments for learning on graphs.</p>
<p><img src="https://shindeshu.github.io/posts/gnns/https:/shindeshu.github.io/assets/images/euclidean.png" width="600"></p>
<p>What is a graph, you say? Graph is a set of vertices / nodes (our objects of interest), with edges (relationships between our objects). For example in a social media graph, an account would be a node, and them following someone could be an edge. Numerically, a graph can be represented as a matrix (adjacency), or as a list (of edges).</p>
<p>What data can be represented in the form of graphs? A lot of it! Interactions on a social media site, financial transactions, citation networks, molecules, all these can be represented in the form of graphs and can then be leveraged for machine learning.</p>
<p>Graph representation learning: when we do have a graph (i.e.&nbsp;our nodes, their features, their edges, <em>their</em> features), our objective is to learn embeddings for each node, such that two “similar” nodes will have their embeddings closer in space. This embedding for a node should bake into itself its relationships and its neighbourhood and their features (apart from its own). This embedding vector can then be used for our downstream tasks.</p>
<p><img src="https://shindeshu.github.io/posts/gnns/https:/shindeshu.github.io/assets/images/node_rep_learning.png" width="600"></p>
<p>Learning the embedding: while there are many ways to skin this particular cat, the one that’s hot right now is called “message passing” or a graph convolution layer. The core concept is pretty simple. Lets say our current node of interest, has three neighbours. Each one of these will pass a “message” to our node, this message being the current state of the node. These messages will be aggregated together with our node’s current state, and this will be used to update the node’s state to next state. After covering for all nodes, you’d get a complete pass over the entire graph, for a single graph convolution layer. Different frameworks will have different ways of passing messages, or updating them, but the underlying principle is pretty same.</p>
<p>The details of message passing, we’ll go over in another post- since this is supposed to be a “brief” introduction.</p>



 ]]></description>
  <category>deep-learning</category>
  <guid>https://shindeshu.github.io/posts/gnns/intro_to_gnn.html</guid>
  <pubDate>Mon, 24 Jan 2022 18:30:00 GMT</pubDate>
  <media:content url="https://shindeshu.github.io/posts/gnns/graph_img.jpeg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
